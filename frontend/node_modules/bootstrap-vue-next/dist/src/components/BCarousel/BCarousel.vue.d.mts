import { BvCarouselEvent } from '../../utils';
import { BCarouselProps } from '../../types/ComponentProps';
import { Numberish } from '../../types/CommonTypes';
declare let __VLS_typeProps: Omit<BCarouselProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BCarouselProps['modelValue'], undefined>;
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: Readonly<{
        default?: (props: Record<string, never>) => any;
    }> & {
        default?: (props: Record<string, never>) => any;
    };
    refs: {
        _element: HTMLDivElement;
        _relatedTarget: HTMLDivElement;
        _slideValues: unknown[];
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    next: () => void;
    pause: import('@vueuse/core').Fn;
    prev: () => void;
    resume: import('@vueuse/core').Fn;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (modelValue: number) => any;
    slide: (value: BvCarouselEvent) => any;
    slid: (value: BvCarouselEvent) => any;
    "click:prev": (value: MouseEvent) => any;
    "click:next": (value: MouseEvent) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:modelValue"?: ((modelValue: number) => any) | undefined;
    onSlide?: ((value: BvCarouselEvent) => any) | undefined;
    onSlid?: ((value: BvCarouselEvent) => any) | undefined;
    "onClick:prev"?: ((value: MouseEvent) => any) | undefined;
    "onClick:next"?: ((value: MouseEvent) => any) | undefined;
}>, {
    id: string;
    noWrap: boolean;
    imgHeight: string;
    imgWidth: string;
    interval: number;
    noHoverPause: boolean;
    noAnimation: boolean;
    fade: boolean;
    controls: boolean;
    background: string;
    controlsNextText: string;
    controlsPrevText: string;
    indicators: boolean;
    indicatorsButtonLabel: string;
    labelIndicators: string;
    keyboard: boolean;
    noTouch: boolean;
    ride: boolean | "carousel";
    rideReverse: boolean;
    touchThreshold: Numberish;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
