{"ast":null,"code":"import apiClient from '@/services/api';\nimport axios from 'axios';\nimport { onMounted, ref } from 'vue';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport default {\n  setup() {\n    const energyData = ref([]);\n    const chartCanvas = ref(null);\n    const solarEnergyData = ref(null);\n    let chartInstance = null;\n    const fetchEnergyData = () => {\n      apiClient.get('energy-data/').then(response => {\n        console.log(\"Energy Data:\", response.data);\n        energyData.value = response.data;\n      }).catch(error => {\n        console.error('Error fetching data:', error);\n      });\n    };\n    const loadSolarData = () => {\n      axios.get('http://127.0.0.1:8000/api/solax-data/', {\n        wifiSn: 'SV8RYX9GZU'\n      }).then(response => {\n        console.log(\"Solar Data:\", response.data);\n        solarEnergyData.value = response.data.result;\n        updateChart();\n      }).catch(error => {\n        console.error('Error fetching solar data:', error);\n      });\n    };\n    const updateChart = () => {\n      const ctx = chartCanvas.value.getContext('2d');\n      if (chartInstance) chartInstance.destroy();\n      chartInstance = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: [\"Solar Power\", \"Solar Energy\", \"Solar Power Percentage\", \"Energy power percentage\"],\n          datasets: [{\n            label: 'Solar Energy Data',\n            data: [solarEnergyData.value.acpower, solarEnergyData.value.yieldtoday, solarEnergyData.value.soc, solarEnergyData.value.uploadTime],\n            backgroundColor: [\"#007bff\", \"#ffc107\", \"#28a745\"]\n          }]\n        }\n      });\n    };\n    onMounted(() => {\n      fetchEnergyData();\n      loadSolarData();\n    });\n    return {\n      energyData,\n      chartCanvas,\n      solarEnergyData,\n      loadSolarData\n    };\n  }\n};","map":{"version":3,"names":["apiClient","axios","onMounted","ref","Chart","registerables","register","setup","energyData","chartCanvas","solarEnergyData","chartInstance","fetchEnergyData","get","then","response","console","log","data","value","catch","error","loadSolarData","wifiSn","result","updateChart","ctx","getContext","destroy","type","labels","datasets","label","acpower","yieldtoday","soc","uploadTime","backgroundColor"],"sources":["C:\\Users\\Jamaa\\Final Year Project\\frontend\\src\\components\\EnergyData.vue"],"sourcesContent":["<template>\r\n    <div class=\"container py-4\">\r\n        <h1 class=\"text-center text-primary mb-4\">Smart Home Energy Dashboard</h1>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n                <div class=\"card shadow-sm mb-4\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title text-dark\">Connected Devices</h4>\r\n                        <ul class=\"list-group\">\r\n                            <li v-for=\"data in energyData\" :key=\"data.id\" class=\"list-group-item\">\r\n                                <strong>{{ data.device_name }}</strong>: {{ data.energy_consumed }} kWh\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div v-if=\"solarEnergyData\" class=\"col-md-6\">\r\n                <div class=\"card shadown-sm mb-4\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title text-dark\">Solar Energy Data</h4>\r\n                        <p><strong>Current Solar Power:</strong> {{ solarEnergyData.acpower }}kWh</p>\r\n                        <p><strong>Daily Yield:</strong> {{ solarEnergyData.yieldtoday }}kWh</p>\r\n                        <p><strong>Battery Power Percentage:</strong> {{ solarEnergyData.soc }}%</p>\r\n                        <p><strong>Total Yield</strong> {{ solarEnergyData.yiedtotal }}kWh</p>\r\n                        <button @click=\"loadSolarData\" class=\"btn btn-primary mt-3\">Refresh data</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <div class=\"card shadow-sm\">\r\n                    <div class=\"card-body text-center\">\r\n                        <h4 class=\"card-title text-dark\">Energy consumption chart</h4>\r\n                        <canvas ref=\"chartCanvas\" class=\"w-100\"></canvas>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- <button @click=\"loadSolarData\">Load Solar button</button> -->\r\n    </div>\r\n    <!-- <div v-if=\"solarEnergyData\">\r\n        <h2>Solar Energy Data</h2>\r\n        <p>Current Solar Power: {{ solarEnergyData.acpower }}kWh</p>\r\n        <p>Current Solar Energy: {{ solarEnergyData.yieldtoday }}kWh</p>\r\n        <p>Current Solar Power Percentage: {{ solarEnergyData.soc }}%</p>\r\n        <p>Current Solar Energy Percentage: {{ solarEnergyData.uploadTime }}%</p>\r\n    </div> -->\r\n\r\n</template>\r\n\r\n<script>\r\nimport apiClient from '@/services/api';\r\nimport axios from 'axios'\r\nimport { onMounted, ref} from 'vue'\r\nimport { Chart, registerables} from 'chart.js'\r\n\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n    setup() {\r\n        const energyData = ref([])\r\n        const chartCanvas = ref(null);\r\n        const solarEnergyData = ref(null)\r\n        let chartInstance = null\r\n\r\n        const fetchEnergyData = () => {\r\n            apiClient.get('energy-data/')\r\n               .then(response => {\r\n                    console.log(\"Energy Data:\", response.data);\r\n                    energyData.value = response.data;\r\n                })\r\n               .catch(error => {\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        };\r\n\r\n        const loadSolarData = () => {\r\n            axios.get('http://127.0.0.1:8000/api/solax-data/', {\r\n                wifiSn: 'SV8RYX9GZU',\r\n            }).then((response) => {\r\n                console.log(\"Solar Data:\", response.data);\r\n                solarEnergyData.value = response.data.result;\r\n                updateChart();\r\n            }).catch((error) => {\r\n                console.error('Error fetching solar data:', error);\r\n            });\r\n        };\r\n        \r\n        const updateChart = () => {\r\n            const ctx = chartCanvas.value.getContext('2d');\r\n            if (chartInstance) chartInstance.destroy();\r\n            chartInstance = new Chart(ctx, {\r\n                type: 'bar',\r\n                data: {\r\n                    labels: [\"Solar Power\", \"Solar Energy\", \"Solar Power Percentage\", \"Energy power percentage\"],\r\n                    datasets: [{\r\n                        label: 'Solar Energy Data',\r\n                        data: [solarEnergyData.value.acpower, solarEnergyData.value.yieldtoday, solarEnergyData.value.soc, solarEnergyData.value.uploadTime],\r\n                        backgroundColor: [\"#007bff\", \"#ffc107\", \"#28a745\"]\r\n                    }]\r\n                }\r\n            })\r\n        }\r\n\r\n        onMounted(() => {\r\n            fetchEnergyData();\r\n            loadSolarData();\r\n        });\r\n\r\n        return {\r\n            energyData,\r\n            chartCanvas,\r\n            solarEnergyData,\r\n            loadSolarData\r\n        };\r\n    }\r\n};\r\n</script>\r\n"],"mappings":"AAqDA,OAAOA,SAAQ,MAAO,gBAAgB;AACtC,OAAOC,KAAI,MAAO,OAAM;AACxB,SAASC,SAAS,EAAEC,GAAG,QAAO,KAAI;AAClC,SAASC,KAAK,EAAEC,aAAa,QAAO,UAAS;AAE7CD,KAAK,CAACE,QAAQ,CAAC,GAAGD,aAAa,CAAC;AAEhC,eAAe;EACXE,KAAKA,CAAA,EAAG;IACJ,MAAMC,UAAS,GAAIL,GAAG,CAAC,EAAE;IACzB,MAAMM,WAAU,GAAIN,GAAG,CAAC,IAAI,CAAC;IAC7B,MAAMO,eAAc,GAAIP,GAAG,CAAC,IAAI;IAChC,IAAIQ,aAAY,GAAI,IAAG;IAEvB,MAAMC,eAAc,GAAIA,CAAA,KAAM;MAC1BZ,SAAS,CAACa,GAAG,CAAC,cAAc,EACxBC,IAAI,CAACC,QAAO,IAAK;QACbC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,QAAQ,CAACG,IAAI,CAAC;QAC1CV,UAAU,CAACW,KAAI,GAAIJ,QAAQ,CAACG,IAAI;MACpC,CAAC,EACDE,KAAK,CAACC,KAAI,IAAK;QACXL,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD,CAAC,CAAC;IACV,CAAC;IAED,MAAMC,aAAY,GAAIA,CAAA,KAAM;MACxBrB,KAAK,CAACY,GAAG,CAAC,uCAAuC,EAAE;QAC/CU,MAAM,EAAE;MACZ,CAAC,CAAC,CAACT,IAAI,CAAEC,QAAQ,IAAK;QAClBC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,QAAQ,CAACG,IAAI,CAAC;QACzCR,eAAe,CAACS,KAAI,GAAIJ,QAAQ,CAACG,IAAI,CAACM,MAAM;QAC5CC,WAAW,CAAC,CAAC;MACjB,CAAC,CAAC,CAACL,KAAK,CAAEC,KAAK,IAAK;QAChBL,OAAO,CAACK,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD,CAAC,CAAC;IACN,CAAC;IAED,MAAMI,WAAU,GAAIA,CAAA,KAAM;MACtB,MAAMC,GAAE,GAAIjB,WAAW,CAACU,KAAK,CAACQ,UAAU,CAAC,IAAI,CAAC;MAC9C,IAAIhB,aAAa,EAAEA,aAAa,CAACiB,OAAO,CAAC,CAAC;MAC1CjB,aAAY,GAAI,IAAIP,KAAK,CAACsB,GAAG,EAAE;QAC3BG,IAAI,EAAE,KAAK;QACXX,IAAI,EAAE;UACFY,MAAM,EAAE,CAAC,aAAa,EAAE,cAAc,EAAE,wBAAwB,EAAE,yBAAyB,CAAC;UAC5FC,QAAQ,EAAE,CAAC;YACPC,KAAK,EAAE,mBAAmB;YAC1Bd,IAAI,EAAE,CAACR,eAAe,CAACS,KAAK,CAACc,OAAO,EAAEvB,eAAe,CAACS,KAAK,CAACe,UAAU,EAAExB,eAAe,CAACS,KAAK,CAACgB,GAAG,EAAEzB,eAAe,CAACS,KAAK,CAACiB,UAAU,CAAC;YACpIC,eAAe,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS;UACrD,CAAC;QACL;MACJ,CAAC;IACL;IAEAnC,SAAS,CAAC,MAAM;MACZU,eAAe,CAAC,CAAC;MACjBU,aAAa,CAAC,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO;MACHd,UAAU;MACVC,WAAW;MACXC,eAAe;MACfY;IACJ,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}