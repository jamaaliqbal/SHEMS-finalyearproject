{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container py-4\"\n};\nconst _hoisted_2 = {\n  class: \"row\"\n};\nconst _hoisted_3 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_4 = {\n  class: \"card shadow-sm mb-4\"\n};\nconst _hoisted_5 = {\n  class: \"card-body\"\n};\nconst _hoisted_6 = {\n  class: \"nav nav-tabs\",\n  id: \"consumptionTabs\"\n};\nconst _hoisted_7 = {\n  class: \"nav-item\"\n};\nconst _hoisted_8 = {\n  class: \"nav-item\"\n};\nconst _hoisted_9 = {\n  key: 0\n};\nconst _hoisted_10 = {\n  class: \"table table-bordered table-striped mt-3\"\n};\nconst _hoisted_11 = {\n  class: \"pagination-controls mt-3\"\n};\nconst _hoisted_12 = [\"disabled\"];\nconst _hoisted_13 = {\n  class: \"mx-2\"\n};\nconst _hoisted_14 = [\"disabled\"];\nconst _hoisted_15 = {\n  key: 1,\n  class: \"mt-3\"\n};\nconst _hoisted_16 = {\n  ref: \"chartCanvas\"\n};\nconst _hoisted_17 = {\n  key: 2\n};\nconst _hoisted_18 = {\n  key: 0,\n  class: \"table table-bordered table-striped mt-3\"\n};\nconst _hoisted_19 = {\n  key: 3\n};\nconst _hoisted_20 = {\n  ref: \"chartCanvas\"\n};\nconst _hoisted_21 = {\n  key: 0,\n  class: \"col-md-6\"\n};\nconst _hoisted_22 = {\n  class: \"card shadown-sm mb-4\"\n};\nconst _hoisted_23 = {\n  class: \"card-body\"\n};\nconst _hoisted_24 = {\n  key: 0,\n  class: \"nav nav-tabs\",\n  id: \"solarTabs\"\n};\nconst _hoisted_25 = {\n  class: \"nav-item\"\n};\nconst _hoisted_26 = {\n  class: \"nav-item\"\n};\nconst _hoisted_27 = {\n  key: 1\n};\nconst _hoisted_28 = {\n  key: 0,\n  class: \"table table-bordered table-striped mt-3\"\n};\nconst _hoisted_29 = {\n  key: 2,\n  class: \"mt-3\"\n};\nconst _hoisted_30 = {\n  ref: \"chartCanvas\"\n};\nconst _hoisted_31 = {\n  class: \"row\"\n};\nconst _hoisted_32 = {\n  class: \"col-md-12\"\n};\nconst _hoisted_33 = {\n  class: \"card shadow-sm\"\n};\nconst _hoisted_34 = {\n  class: \"card-body text-center\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_WeatherView = _resolveComponent(\"WeatherView\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[21] || (_cache[21] = _createElementVNode(\"h1\", {\n    class: \"text-center text-primary mb-4\"\n  }, \"Smart Home Energy Dashboard\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Energy Data Card \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_cache[13] || (_cache[13] = _createElementVNode(\"h4\", {\n    class: \"card-title text-dark\"\n  }, \"Electricity Consumption\", -1 /* HOISTED */)), _createCommentVNode(\" Tabs \"), _createElementVNode(\"ul\", _hoisted_6, [_createElementVNode(\"li\", _hoisted_7, [_createElementVNode(\"a\", {\n    class: _normalizeClass([\"nav-link\", {\n      active: $setup.consumptionTab === 'table'\n    }]),\n    onClick: _cache[0] || (_cache[0] = $event => $setup.consumptionTab = 'table')\n  }, \"Table\", 2 /* CLASS */)]), _createElementVNode(\"li\", _hoisted_8, [_createElementVNode(\"a\", {\n    class: _normalizeClass([\"nav-link\", {\n      active: $setup.consumptionTab === 'chart'\n    }]),\n    onClick: _cache[1] || (_cache[1] = $event => $setup.consumptionTab = 'chart')\n  }, \"Chart\", 2 /* CLASS */)])]), _createCommentVNode(\" Tab contents \"), $setup.consumptionTab === 'table' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createCommentVNode(\" Bootstrap Table \"), _createElementVNode(\"table\", _hoisted_10, [_cache[10] || (_cache[10] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Start Time\"), _createElementVNode(\"th\", null, \"End Time\"), _createElementVNode(\"th\", null, \"Consumption (kWh)\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.paginatedData, (data, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(new Date(data.interval_start).toLocaleString('en-GB', {\n      dateStyle: 'short',\n      timeStyle: 'short'\n    })), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(new Date(data.interval_end).toLocaleString('en-GB', {\n      dateStyle: 'short',\n      timeStyle: 'short'\n    })), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(data.consumption), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Pagination \"), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $setup.prevPage && $setup.prevPage(...args)),\n    disabled: $setup.currentPage === 1,\n    class: \"btn btn-secondary\"\n  }, \"Previous\", 8 /* PROPS */, _hoisted_12), _createElementVNode(\"span\", _hoisted_13, \"Page \" + _toDisplayString($setup.currentPage), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $setup.nextPage && $setup.nextPage(...args)),\n    disabled: $setup.currentPage * $setup.pageSize >= $setup.consumptionData.length,\n    class: \"btn btn-secondary\"\n  }, \"Next\", 8 /* PROPS */, _hoisted_14)])])) : _createCommentVNode(\"v-if\", true), $setup.consumptionTab === 'chart' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [_createElementVNode(\"canvas\", _hoisted_16, null, 512 /* NEED_PATCH */)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Prediction dropdown\"), _cache[14] || (_cache[14] = _createElementVNode(\"label\", {\n    for: \"prediction-period\"\n  }, \"Predict Energy Usage For:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"prediction-period\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.selectedPredictedPeriod = $event),\n    class: \"form-control\"\n  }, _cache[11] || (_cache[11] = [_createElementVNode(\"option\", {\n    value: \"hour\"\n  }, \"Next Hour\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"day\"\n  }, \"Next Day\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"week\"\n  }, \"Next 7 Days\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $setup.selectedPredictedPeriod]]), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $setup.fetchPrediction && $setup.fetchPrediction(...args)),\n    class: \"btn btn-primary mt-3\"\n  }, \"Predict energy usage\"), _createCommentVNode(\" Prediction table for energy usgage \"), $setup.consumptionTab === 'table' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [$setup.predictedEnergy.length ? (_openBlock(), _createElementBlock(\"table\", _hoisted_18, [_cache[12] || (_cache[12] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Hour\"), _createElementVNode(\"th\", null, \"Predicted Energy \")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.predictedEnergy, (data, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, \"Hour \" + _toDisplayString(index + 1), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(data), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Chart for predicted energy usage \"), $setup.consumptionTab === 'chart' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_19, [_createElementVNode(\"canvas\", _hoisted_20, null, 512 /* NEED_PATCH */)])) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" Solar Energy Data \"), $setup.solarEnergyData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_21, [_createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"div\", _hoisted_23, [_cache[20] || (_cache[20] = _createElementVNode(\"h4\", {\n    class: \"card-title text-dark\"\n  }, \"Solar Energy Data\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, [_cache[15] || (_cache[15] = _createElementVNode(\"strong\", null, \"Current Solar Power:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.solarEnergyData.acpower) + \"W\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[16] || (_cache[16] = _createElementVNode(\"strong\", null, \"Daily Yield:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.solarEnergyData.yieldtoday) + \"kWh\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[17] || (_cache[17] = _createElementVNode(\"strong\", null, \"Battery Power Percentage:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.solarEnergyData.soc) + \"%\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[18] || (_cache[18] = _createElementVNode(\"strong\", null, \"Total Yield\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($setup.solarEnergyData.yieldtotal) + \"kWh\", 1 /* TEXT */)]), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $setup.loadSolarData && $setup.loadSolarData(...args)),\n    class: \"btn btn-primary mt-3\"\n  }, \"Refresh data\"), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $setup.fetchSolarPredictions && $setup.fetchSolarPredictions(...args)),\n    class: \"btn btn-primary\"\n  }, \"Predict Solar Power\"), _createCommentVNode(\" Tabs \"), $setup.solarPredictions.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_24, [_createElementVNode(\"li\", _hoisted_25, [_createElementVNode(\"a\", {\n    class: _normalizeClass([\"nav-link\", {\n      active: $setup.solarTab === 'table'\n    }]),\n    onClick: _cache[8] || (_cache[8] = $event => $setup.solarTab = 'table')\n  }, \"Table\", 2 /* CLASS */)]), _createElementVNode(\"li\", _hoisted_26, [_createElementVNode(\"a\", {\n    class: _normalizeClass([\"nav-link\", {\n      active: $setup.solarTab === 'chart'\n    }]),\n    onClick: _cache[9] || (_cache[9] = $event => $setup.solarTab = 'chart')\n  }, \"Chart\", 2 /* CLASS */)])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Tab contents \"), $setup.solarTab === 'table' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_27, [_createCommentVNode(\" Prediction table for solar power \"), $setup.solarPredictions.length ? (_openBlock(), _createElementBlock(\"table\", _hoisted_28, [_cache[19] || (_cache[19] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Hour\"), _createElementVNode(\"th\", null, \"Predicted Power (W)\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.solarPredictions, (data, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, \"Hour \" + _toDisplayString(index + 1), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(data.toFixed(2)) + \" W\", 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Chart for solar predictions\"), $setup.solarTab === 'chart' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_29, [_createElementVNode(\"canvas\", _hoisted_30, null, 512 /* NEED_PATCH */)])) : _createCommentVNode(\"v-if\", true)])])])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_31, [_createElementVNode(\"div\", _hoisted_32, [_createElementVNode(\"div\", _hoisted_33, [_createElementVNode(\"div\", _hoisted_34, [_createVNode(_component_WeatherView)])])])])]);\n}","map":{"version":3,"names":["class","id","key","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_normalizeClass","active","$setup","consumptionTab","onClick","_cache","$event","_hoisted_8","_hoisted_9","_hoisted_10","_Fragment","_renderList","paginatedData","data","index","_toDisplayString","Date","interval_start","toLocaleString","dateStyle","timeStyle","interval_end","consumption","_hoisted_11","args","prevPage","disabled","currentPage","_hoisted_12","_hoisted_13","nextPage","pageSize","consumptionData","length","_hoisted_14","_hoisted_15","_hoisted_16","for","selectedPredictedPeriod","value","fetchPrediction","_hoisted_17","predictedEnergy","_hoisted_18","_hoisted_19","_hoisted_20","solarEnergyData","_hoisted_21","_hoisted_22","_hoisted_23","_createTextVNode","acpower","yieldtoday","soc","yieldtotal","loadSolarData","fetchSolarPredictions","solarPredictions","_hoisted_24","_hoisted_25","solarTab","_hoisted_26","_hoisted_27","_hoisted_28","toFixed","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_createVNode","_component_WeatherView"],"sources":["C:\\Users\\Jamaa\\Final Year Project\\frontend\\src\\components\\EnergyData.vue"],"sourcesContent":["<template>\r\n    <div class=\"container py-4\">\r\n        <h1 class=\"text-center text-primary mb-4\">Smart Home Energy Dashboard</h1>\r\n        <div class=\"row\">\r\n            <!-- Energy Data Card -->\r\n            <div class=\"col-md-6\">\r\n                <div class=\"card shadow-sm mb-4\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title text-dark\">Electricity Consumption</h4>\r\n                        <!-- Tabs -->\r\n                        <ul class=\"nav nav-tabs\" id=\"consumptionTabs\">\r\n                            <li class=\"nav-item\">\r\n                                <a class=\"nav-link\" :class=\"{ active: consumptionTab === 'table' }\" @click=\"consumptionTab = 'table'\">Table</a>\r\n                            </li>\r\n                            <li class=\"nav-item\">\r\n                                <a class=\"nav-link\" :class=\"{ active: consumptionTab === 'chart' }\" @click=\"consumptionTab = 'chart'\">Chart</a>\r\n                            </li>\r\n                        </ul>\r\n                        <!-- Tab contents -->\r\n                        <div v-if=\"consumptionTab === 'table'\">\r\n                            <!-- Bootstrap Table -->\r\n                            <table class=\"table table-bordered table-striped mt-3\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Start Time</th>\r\n                                        <th>End Time</th>\r\n                                        <th>Consumption (kWh)</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr v-for=\"(data, index) in paginatedData\" :key=\"index\">\r\n                                        <td>{{ new Date(data.interval_start).toLocaleString('en-GB', { dateStyle: 'short', timeStyle: 'short' }) }}</td>\r\n                                        <td>{{ new Date(data.interval_end).toLocaleString('en-GB', { dateStyle: 'short', timeStyle: 'short' }) }}</td>\r\n                                        <td>{{ data.consumption }}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <!-- Pagination -->\r\n                            <div class=\"pagination-controls mt-3\">\r\n                                <button @click=\"prevPage\" :disabled=\"currentPage === 1\" class=\"btn btn-secondary\">Previous</button>\r\n                                <span class=\"mx-2\">Page {{ currentPage }}</span>\r\n                                <button @click=\"nextPage\" :disabled=\"currentPage * pageSize >= consumptionData.length\" class=\"btn btn-secondary\">Next</button>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div v-if=\"consumptionTab === 'chart'\" class=\"mt-3\">\r\n                            <canvas ref=\"chartCanvas\"></canvas>\r\n                        </div>\r\n\r\n                        <!-- Prediction dropdown-->\r\n                        <label for=\"prediction-period\">Predict Energy Usage For:</label>\r\n                        <select id=\"prediction-period\" v-model=\"selectedPredictedPeriod\" class=\"form-control\">\r\n                            <option value=\"hour\">Next Hour</option>\r\n                            <option value=\"day\">Next Day</option>\r\n                            <option value=\"week\">Next 7 Days</option>\r\n                        </select>\r\n\r\n                        <button @click=\"fetchPrediction\" class=\"btn btn-primary mt-3\">Predict energy usage</button>\r\n                        <!-- Prediction table for energy usgage -->\r\n                        <div v-if=\"consumptionTab === 'table'\">\r\n                            <table v-if=\"predictedEnergy.length\" class=\"table table-bordered table-striped mt-3\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Hour</th>\r\n                                        <th>Predicted Energy </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr v-for=\"(data, index) in predictedEnergy\" :key=\"index\">\r\n                                        <td>Hour {{ index + 1 }}</td>\r\n                                        <td>{{ data }}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <!-- Chart for predicted energy usage -->\r\n                        <div v-if=\"consumptionTab === 'chart'\">\r\n                            <canvas ref=\"chartCanvas\"></canvas>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- Solar Energy Data -->\r\n            <div v-if=\"solarEnergyData\" class=\"col-md-6\">\r\n                <div class=\"card shadown-sm mb-4\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title text-dark\">Solar Energy Data</h4>\r\n                        <p><strong>Current Solar Power:</strong> {{ solarEnergyData.acpower }}W</p>\r\n                        <p><strong>Daily Yield:</strong> {{ solarEnergyData.yieldtoday }}kWh</p>\r\n                        <p><strong>Battery Power Percentage:</strong> {{ solarEnergyData.soc }}%</p>\r\n                        <p><strong>Total Yield</strong> {{ solarEnergyData.yieldtotal }}kWh</p>\r\n                        <button @click=\"loadSolarData\" class=\"btn btn-primary mt-3\">Refresh data</button>\r\n\r\n                        <button @click=\"fetchSolarPredictions\" class=\"btn btn-primary\">Predict Solar Power</button>\r\n                        <!-- Tabs -->\r\n                        <ul v-if=\"solarPredictions.length\" class=\"nav nav-tabs\" id=\"solarTabs\">\r\n                            <li class=\"nav-item\">\r\n                                <a class=\"nav-link\" :class=\"{ active: solarTab === 'table' }\" @click=\"solarTab = 'table'\">Table</a>\r\n                            </li>\r\n                            <li class=\"nav-item\">\r\n                                <a class=\"nav-link\" :class=\"{ active: solarTab === 'chart' }\" @click=\"solarTab = 'chart'\">Chart</a>\r\n                            </li>\r\n                        </ul>\r\n                        <!-- Tab contents -->\r\n                        <div v-if=\"solarTab === 'table'\">\r\n                            <!-- Prediction table for solar power -->\r\n                            <table v-if=\"solarPredictions.length\" class=\"table table-bordered table-striped mt-3\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Hour</th>\r\n                                        <th>Predicted Power (W)</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr v-for=\"(data, index) in solarPredictions\" :key=\"index\">\r\n                                        <td>Hour {{ index + 1 }}</td>\r\n                                        <td>{{ data.toFixed(2) }} W</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <!-- Chart for solar predictions-->\r\n                        <div v-if=\"solarTab === 'chart'\" class=\"mt-3\">\r\n                            <canvas ref=\"chartCanvas\"></canvas>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <div class=\"card shadow-sm\">\r\n                    <div class=\"card-body text-center\">\r\n                        <WeatherView></WeatherView>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport apiClient from '@/services/api';\r\nimport axios from 'axios'\r\nimport { onMounted, ref, computed, watch} from 'vue'\r\nimport { Chart, registerables} from 'chart.js'\r\nimport WeatherView from './WeatherView.vue';\r\n\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n    components: {\r\n        WeatherView\r\n    },\r\n    setup() {\r\n        const energyData = ref([])\r\n        const octopusData = ref([])\r\n        const solarData = ref([])\r\n        const solarPredictions = ref([])\r\n        const weatherData = ref([])\r\n        const chartCanvas = ref(null);\r\n        const solarChartCanvas = ref(null);\r\n        const solarEnergyData = ref(null)\r\n        let chartInstance = null\r\n        let solarChartInstance = null\r\n        const consumptionData = ref([])\r\n        const currentPage = ref(1)\r\n        const pageSize = 10\r\n        const selectedGroupBy = ref(\"hour\")\r\n        const last7DaysEnergyData = ref([])\r\n        const predictedEnergy = ref([])\r\n        const selectedPredictedPeriod = ref(\"hour\")\r\n        const user = ref([])\r\n        const consumptionTab = ref(\"table\")\r\n        const solarTab = ref(\"table\")\r\n        const groupOptions = ref([\r\n            { value: \"hour\", text: \"Hourly\" },\r\n            { value: \"day\", text: \"Daily\" },\r\n            { value: \"week\", text: \"Weekly\" },\r\n            { value: \"month\", text: \"Monthly\" }\r\n        ])\r\n\r\n        const fetchConsumptionData = () => {\r\n            axios.get(\"http://127.0.0.1:8000/api/octopus-data/\", {\r\n                params: {\r\n                    group_by: selectedGroupBy.value,\r\n                    page_size: 200,\r\n                    user: user.value,\r\n                }\r\n            }).then(response => {\r\n                console.log(\"Consumption data:\", response.data.results)\r\n                consumptionData.value = response.data.results\r\n                currentPage.value = 1\r\n\r\n                last7DaysEnergyData.value = response.data.results.slice(-168)\r\n                console.log(\"Last 7 days energy data: \" + last7DaysEnergyData.value)\r\n                updateEnergyChart();\r\n            }).catch(error => {\r\n                console.error('Error fetching data:', error);\r\n            })\r\n        }\r\n\r\n        // Paginated data computation\r\n        const paginatedData = computed(() => {\r\n            const start = (currentPage.value - 1) * pageSize;\r\n            return consumptionData.value.slice(start, start + pageSize);\r\n        });\r\n\r\n        const nextPage = () => {\r\n            if (currentPage.value * pageSize < consumptionData.value.length) {\r\n                currentPage.value++;\r\n            }\r\n        };\r\n\r\n        const prevPage = () => {\r\n            if (currentPage.value > 1) {\r\n                currentPage.value--;\r\n            }\r\n        };\r\n\r\n        const fetchEnergyData = () => {\r\n            apiClient.get('energy-data/')\r\n               .then(response => {\r\n                    console.log(\"Energy Data:\", response.data);\r\n                    energyData.value = response.data;\r\n                })\r\n               .catch(error => {\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        };\r\n\r\n        const fetchSolarData = () => {\r\n            apiClient.get('solar-data/')\r\n               .then(response => {\r\n                    console.log(\"Get Solar Data:\", response.data);\r\n                    solarData.value = response.data;\r\n                })\r\n               .catch(error => {\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        };\r\n\r\n        const loadSolarData = async () => {\r\n            try {\r\n                console.log(\"Current user solar data:\", user);\r\n                const response = await axios.get('http://127.0.0.1:8000/api/solax-data/', {\r\n                    params: {\r\n                        wifiSn: 'SV8RYX9GZU',\r\n                        user: user.value,\r\n                    }\r\n                })\r\n                console.log(\"Load Solar Data:\", response.data);\r\n                solarEnergyData.value = response.data.result;\r\n                // updateChart();\r\n            } catch(error) {\r\n                console.error('Error fetching solar data:', error);\r\n            };\r\n        };\r\n\r\n        // NOT CURRENTLY NEEDED AS FETCHCONSUMPTION METHOD DOES SAME THING \r\n        const loadOctopusData = () => {\r\n            console.log(\"Current user octopus data:\", user);\r\n            axios.get(\"http://127.0.0.1:8000/api/octopus-data/\")\r\n            .then(response => {\r\n                 console.log(\"Octopus Data:\", response.data);\r\n                 octopusData.value = response.data.results;\r\n                 updateChart();\r\n             }).catch((error) => {\r\n                console.error('Error fetching octopus data:', error);\r\n             });\r\n        }\r\n\r\n        const fetchWeatherData = () => {\r\n            // apiClient.get('weather-data/')\r\n            axios.get(\"http://127.0.0.1:8000/api/weather-data/\")\r\n               .then(response => {\r\n                    console.log(\"Get Weather Data:\", response.data);\r\n                    weatherData.value = response.data;\r\n                })\r\n               .catch(error => {\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        };\r\n\r\n        const fetchPrediction = async () => {\r\n            try {\r\n                const consumptionHistoryEnergyData = ref([])\r\n                consumptionHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => entry.consumption)\r\n                const hourHistoryEnergyData = ref([])\r\n                hourHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => new Date(entry.interval_start).getHours() / 23);\r\n                const dayHistoryEnergyData = ref([])\r\n                dayHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => new Date(entry.interval_start).getDay() / 6);\r\n                const monthHistoryEnergyData = ref([])\r\n                monthHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => (new Date(entry.interval_start).getMonth() + 1) / 12);\r\n                console.log(\"Fetching prediction for period:\", selectedPredictedPeriod.value);\r\n                const response = await axios.post(\"http://127.0.0.1:5001/predict-energy\", {\r\n                    consumption_history: consumptionHistoryEnergyData.value,\r\n                    hour: hourHistoryEnergyData.value,\r\n                    day: dayHistoryEnergyData.value,\r\n                    month: monthHistoryEnergyData.value,\r\n                    prediction_period: selectedPredictedPeriod.value,\r\n                });\r\n                console.log(\"Predicted energy usage:\", response.data.predicted_energy_usage);\r\n                // predictedEnergy.value = response.data.predicted_energy_usage.map(value => value.toFixed(2) + \" kWh\");\r\n                predictedEnergy.value = response.data.predicted_energy_usage.map(value => Math.max(0, value).toFixed(2) + \" kWh\");\r\n                updateEnergyChart();\r\n            } catch (error) {\r\n                console.error('Error fetching prediction:', error);\r\n                predictedEnergy.value = \"Error fetching prediction\";\r\n            }\r\n            \r\n        }\r\n\r\n        const fetchSolarPredictions = async () => { \r\n            const user = await getCurrentUser();\r\n            console.log(\"Current user:\", user);\r\n            try {\r\n                if (solarData.value.length < 48) { \r\n                    console.error('Not enough solar data to predict');\r\n                    return;\r\n                }\r\n\r\n                const formattedSolarData = solarData.value.slice(-48).map(entry => ({\r\n                    ac_power: entry.ac_power,\r\n                    yield_today: entry.yield_today\r\n                }))\r\n\r\n                const formattedWeatherData = weatherData.value.slice(-48).map(entry => ({\r\n                    temperature: entry.temperature,\r\n                    humidity: entry.humidity,\r\n                    wind_speed: entry.wind_speed,\r\n                    clouds: entry.clouds\r\n                }))\r\n\r\n                const response = await axios.post(\"http://127.0.0.1:5001/predict-solar\", {\r\n                    solar_history: formattedSolarData, \r\n                    weather_history: formattedWeatherData\r\n                })\r\n\r\n                console.log(\"Predicted solar energy usage:\", response.data.solar_prediction);\r\n                // solarPredictions.value = response.data.solar_prediction\r\n                solarPredictions.value = response.data.solar_prediction.map((val) => Math.max(0, val));\r\n                updateSolarChart();\r\n            } catch (error) {\r\n                console.error('Error fetching prediction:', error);\r\n                // solarPredictions.value = \"Error fetching prediction\";\r\n            }\r\n        }\r\n\r\n        const updateEnergyChart = () => {\r\n            if (!chartCanvas.value || predictedEnergy.value.length === 0) return;\r\n            const ctx = chartCanvas.value.getContext(\"2d\");\r\n            if (chartInstance) chartInstance.destroy();\r\n            chartInstance = new Chart(ctx, {\r\n                type: 'line',\r\n                data: {\r\n                labels: predictedEnergy.value.map((_, i) => `Hour ${i + 1}`),\r\n                datasets: [{\r\n                    label: \"Predicted Energy Usage\",\r\n                    data: predictedEnergy.value.map(val => parseFloat(val)),\r\n                    borderColor: \"#007bff\",\r\n                    fill: false\r\n                }]\r\n                },\r\n                options: { responsive: true, scales: { y: { beginAtZero: true } } }\r\n            });\r\n        }\r\n\r\n        const updateSolarChart = () => {\r\n            if (!solarChartCanvas.value || solarPredictions.value.length === 0) return;\r\n            const ctx = solarChartCanvas.value.getContext(\"2d\");\r\n            if (solarChartInstance) solarChartInstance.destroy();\r\n            solarChartInstance = new Chart(ctx, {\r\n                type: 'line',\r\n                data: {\r\n                    labels: solarPredictions.value.map((_, i) => `Hour ${i + 1}`),\r\n                    datasets: [{\r\n                        label: \"Predicted Solar Power\",\r\n                        data: solarPredictions.value.map(val => parseFloat(val)),\r\n                        borderColor: \"#28a745\",\r\n                        fill: false\r\n                    }]\r\n                },\r\n                options: { responsive: true, scales: { y: { beginAtZero: true } } }\r\n            });\r\n        }\r\n\r\n        const getCurrentUser = async () => {\r\n            const response = await apiClient.get(\"/api/current-user/\");\r\n            return response.data;\r\n        }\r\n        \r\n        // const updateChart = () => {\r\n        //     const ctx = chartCanvas.value.getContext('2d');\r\n        //     if (chartInstance) chartInstance.destroy();\r\n        //     chartInstance = new Chart(ctx, {\r\n        //         type: 'bar',\r\n        //         data: {\r\n        //             labels: [\"Solar Power\", \"Solar Energy\", \"Solar Power Percentage\", \"Energy power percentage\"],\r\n        //             datasets: [{\r\n        //                 label: 'Solar Energy Data',\r\n        //                 data: [solarEnergyData.value.acpower, solarEnergyData.value.yieldtoday, solarEnergyData.value.soc, solarEnergyData.value.uploadTime],\r\n        //                 backgroundColor: [\"#007bff\", \"#ffc107\", \"#28a745\"]\r\n        //             }]\r\n        //         }\r\n        //     })\r\n        // }\r\n\r\n        onMounted(async () => {\r\n            // fetchEnergyData();\r\n            // fetchSolarData();\r\n            try {\r\n                user.value = await getCurrentUser();\r\n                // user.value = getUser.data;\r\n                console.log(\"User data:\", user.value);\r\n                // console.log(\"Current user:\", getUser);\r\n                await loadSolarData();\r\n                await fetchSolarData();\r\n                // loadOctopusData();\r\n                await fetchConsumptionData(); \r\n                fetchWeatherData();\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n            \r\n        });\r\n\r\n        watch(consumptionTab, () => {\r\n            if (consumptionTab.value === 'chart') updateEnergyChart();\r\n        });\r\n\r\n        watch(solarTab, () => {\r\n            if (solarTab.value === 'chart') updateSolarChart();\r\n        });\r\n\r\n        return {\r\n            energyData,\r\n            chartCanvas,\r\n            solarChartCanvas,\r\n            solarEnergyData,\r\n            loadSolarData,\r\n            solarData,\r\n            octopusData,\r\n            consumptionData,\r\n            currentPage,\r\n            pageSize,\r\n            selectedGroupBy,\r\n            groupOptions,\r\n            paginatedData,\r\n            // updateChart,\r\n            nextPage,\r\n            prevPage,\r\n            fetchConsumptionData,\r\n            WeatherView,\r\n            last7DaysEnergyData,\r\n            predictedEnergy,\r\n            selectedPredictedPeriod,\r\n            fetchPrediction,\r\n            solarPredictions,\r\n            fetchSolarPredictions,\r\n            consumptionTab,\r\n            solarTab,\r\n        };\r\n    }\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}