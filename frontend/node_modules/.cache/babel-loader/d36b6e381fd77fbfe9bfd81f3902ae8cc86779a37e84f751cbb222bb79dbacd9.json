{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container py-4\"\n};\nconst _hoisted_2 = {\n  class: \"row\"\n};\nconst _hoisted_3 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_4 = {\n  class: \"card shadow-sm mb-4\"\n};\nconst _hoisted_5 = {\n  class: \"card-body\"\n};\nconst _hoisted_6 = {\n  class: \"nav nav-tabs\",\n  id: \"consumptionTabs\"\n};\nconst _hoisted_7 = {\n  class: \"nav-item\"\n};\nconst _hoisted_8 = {\n  class: \"nav-item\"\n};\nconst _hoisted_9 = [\"value\"];\nconst _hoisted_10 = {\n  key: 0\n};\nconst _hoisted_11 = {\n  class: \"table table-bordered table-striped mt-3\"\n};\nconst _hoisted_12 = {\n  class: \"pagination-controls mt-3\"\n};\nconst _hoisted_13 = [\"disabled\"];\nconst _hoisted_14 = {\n  class: \"mx-2\"\n};\nconst _hoisted_15 = [\"disabled\"];\nconst _hoisted_16 = {\n  key: 1,\n  class: \"mt-3\"\n};\nconst _hoisted_17 = {\n  ref: \"energyChartCanvas\"\n};\nconst _hoisted_18 = {\n  key: 2\n};\nconst _hoisted_19 = {\n  key: 0,\n  class: \"table table-bordered table-striped mt-3\"\n};\nconst _hoisted_20 = {\n  key: 3\n};\nconst _hoisted_21 = {\n  ref: \"chartCanvas\"\n};\nconst _hoisted_22 = {\n  key: 0,\n  class: \"col-md-6\"\n};\nconst _hoisted_23 = {\n  class: \"card shadown-sm mb-4\"\n};\nconst _hoisted_24 = {\n  class: \"card-body\"\n};\nconst _hoisted_25 = {\n  key: 0,\n  class: \"nav nav-tabs\",\n  id: \"solarTabs\"\n};\nconst _hoisted_26 = {\n  class: \"nav-item\"\n};\nconst _hoisted_27 = {\n  class: \"nav-item\"\n};\nconst _hoisted_28 = {\n  key: 1\n};\nconst _hoisted_29 = {\n  key: 0,\n  class: \"table table-bordered table-striped mt-3\"\n};\nconst _hoisted_30 = {\n  key: 2,\n  class: \"mt-3\"\n};\nconst _hoisted_31 = {\n  ref: \"solarChartCanvas\"\n};\nconst _hoisted_32 = {\n  class: \"row\"\n};\nconst _hoisted_33 = {\n  class: \"col-md-12\"\n};\nconst _hoisted_34 = {\n  class: \"card shadow-sm\"\n};\nconst _hoisted_35 = {\n  class: \"card-body text-center\"\n};\nexport function render(_ctx, _cache) {\n  const _component_WeatherView = _resolveComponent(\"WeatherView\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[24] || (_cache[24] = _createElementVNode(\"h1\", {\n    class: \"text-center text-primary mb-4\"\n  }, \"Smart Home Energy Dashboard\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Energy Data Card \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_cache[15] || (_cache[15] = _createElementVNode(\"h4\", {\n    class: \"card-title text-dark\"\n  }, \"Electricity Consumption\", -1 /* HOISTED */)), _createCommentVNode(\" Tabs \"), _createElementVNode(\"ul\", _hoisted_6, [_createElementVNode(\"li\", _hoisted_7, [_createElementVNode(\"a\", {\n    class: _normalizeClass([\"nav-link\", {\n      active: _ctx.consumptionTab === 'table'\n    }]),\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.consumptionTab = 'table')\n  }, \"Table\", 2 /* CLASS */)]), _createElementVNode(\"li\", _hoisted_8, [_createElementVNode(\"a\", {\n    class: _normalizeClass([\"nav-link\", {\n      active: _ctx.consumptionTab === 'chart'\n    }]),\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.consumptionTab = 'chart')\n  }, \"Chart\", 2 /* CLASS */)])]), _createCommentVNode(\" Group By Dropdown \"), _cache[16] || (_cache[16] = _createElementVNode(\"label\", {\n    for: \"group-by\"\n  }, \"Group Consumption Data By:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"group-by\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.selectedGroupBy = $event),\n    class: \"form-control\",\n    onChange: _cache[3] || (_cache[3] = (...args) => _ctx.fetchConsumptionData && _ctx.fetchConsumptionData(...args))\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.groupOptions, option => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: option.value,\n      value: option.value\n    }, _toDisplayString(option.text), 9 /* TEXT, PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, _ctx.selectedGroupBy]]), _createCommentVNode(\" Tab contents \"), _ctx.consumptionTab === 'table' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createCommentVNode(\" Bootstrap Table \"), _createElementVNode(\"table\", _hoisted_11, [_cache[12] || (_cache[12] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Start Time\"), _createElementVNode(\"th\", null, \"End Time\"), _createElementVNode(\"th\", null, \"Consumption (kWh)\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.paginatedData, (data, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(new Date(data.interval_start).toLocaleString('en-GB', {\n      dateStyle: 'short',\n      timeStyle: 'short'\n    })), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(new Date(data.interval_end).toLocaleString('en-GB', {\n      dateStyle: 'short',\n      timeStyle: 'short'\n    })), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(data.consumption), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Pagination \"), _createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => _ctx.prevPage && _ctx.prevPage(...args)),\n    disabled: _ctx.currentPage === 1,\n    class: \"btn btn-secondary\"\n  }, \"Previous\", 8 /* PROPS */, _hoisted_13), _createElementVNode(\"span\", _hoisted_14, \"Page \" + _toDisplayString(_ctx.currentPage), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => _ctx.nextPage && _ctx.nextPage(...args)),\n    disabled: _ctx.currentPage * _ctx.pageSize >= _ctx.consumptionData.length,\n    class: \"btn btn-secondary\"\n  }, \"Next\", 8 /* PROPS */, _hoisted_15)])])) : _createCommentVNode(\"v-if\", true), _ctx.consumptionTab === 'chart' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [_createElementVNode(\"canvas\", _hoisted_17, null, 512 /* NEED_PATCH */)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Prediction dropdown\"), _cache[17] || (_cache[17] = _createElementVNode(\"label\", {\n    for: \"prediction-period\"\n  }, \"Predict Energy Usage For:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"prediction-period\",\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => _ctx.selectedPredictedPeriod = $event),\n    class: \"form-control\"\n  }, _cache[13] || (_cache[13] = [_createElementVNode(\"option\", {\n    value: \"hour\"\n  }, \"Next Hour\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"day\"\n  }, \"Next Day\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"week\"\n  }, \"Next 7 Days\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedPredictedPeriod]]), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => _ctx.fetchPrediction && _ctx.fetchPrediction(...args)),\n    class: \"btn btn-primary mt-3\"\n  }, \"Predict energy usage\"), _createCommentVNode(\" Prediction table for energy usgage \"), _ctx.consumptionTab === 'table' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_ctx.predictedEnergy.length ? (_openBlock(), _createElementBlock(\"table\", _hoisted_19, [_cache[14] || (_cache[14] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Hour\"), _createElementVNode(\"th\", null, \"Predicted Energy \")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.predictedEnergy, (data, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, \"Hour \" + _toDisplayString(index + 1), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(data), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Chart for predicted energy usage \"), _ctx.consumptionTab === 'chart' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [_createElementVNode(\"canvas\", _hoisted_21, null, 512 /* NEED_PATCH */)])) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" Solar Energy Data \"), _ctx.solarEnergyData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [_createElementVNode(\"div\", _hoisted_23, [_createElementVNode(\"div\", _hoisted_24, [_cache[23] || (_cache[23] = _createElementVNode(\"h4\", {\n    class: \"card-title text-dark\"\n  }, \"Solar Energy Data\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, [_cache[18] || (_cache[18] = _createElementVNode(\"strong\", null, \"Current Solar Power:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.solarEnergyData.acpower) + \"W\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[19] || (_cache[19] = _createElementVNode(\"strong\", null, \"Daily Yield:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.solarEnergyData.yieldtoday) + \"kWh\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[20] || (_cache[20] = _createElementVNode(\"strong\", null, \"Battery Power Percentage:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.solarEnergyData.soc) + \"%\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[21] || (_cache[21] = _createElementVNode(\"strong\", null, \"Total Yield\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.solarEnergyData.yieldtotal) + \"kWh\", 1 /* TEXT */)]), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => _ctx.loadSolarData && _ctx.loadSolarData(...args)),\n    class: \"btn btn-primary mt-3\"\n  }, \"Refresh data\"), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = (...args) => _ctx.fetchSolarPredictions && _ctx.fetchSolarPredictions(...args)),\n    class: \"btn btn-primary\"\n  }, \"Predict Solar Power\"), _createCommentVNode(\" Tabs \"), _ctx.solarPredictions.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_25, [_createElementVNode(\"li\", _hoisted_26, [_createElementVNode(\"a\", {\n    class: _normalizeClass([\"nav-link\", {\n      active: _ctx.solarTab === 'table'\n    }]),\n    onClick: _cache[10] || (_cache[10] = $event => _ctx.solarTab = 'table')\n  }, \"Table\", 2 /* CLASS */)]), _createElementVNode(\"li\", _hoisted_27, [_createElementVNode(\"a\", {\n    class: _normalizeClass([\"nav-link\", {\n      active: _ctx.solarTab === 'chart'\n    }]),\n    onClick: _cache[11] || (_cache[11] = $event => _ctx.solarTab = 'chart')\n  }, \"Chart\", 2 /* CLASS */)])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Tab contents \"), _ctx.solarTab === 'table' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_28, [_createCommentVNode(\" Prediction table for solar power \"), _ctx.solarPredictions.length ? (_openBlock(), _createElementBlock(\"table\", _hoisted_29, [_cache[22] || (_cache[22] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Hour\"), _createElementVNode(\"th\", null, \"Predicted Power (W)\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.solarPredictions, (data, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, \"Hour \" + _toDisplayString(index + 1), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(data.toFixed(2)) + \" W\", 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Chart for solar predictions\"), _ctx.solarTab === 'chart' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_30, [_createElementVNode(\"canvas\", _hoisted_31, null, 512 /* NEED_PATCH */)])) : _createCommentVNode(\"v-if\", true)])])])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_32, [_createElementVNode(\"div\", _hoisted_33, [_createElementVNode(\"div\", _hoisted_34, [_createElementVNode(\"div\", _hoisted_35, [_createVNode(_component_WeatherView)])])])])]);\n}","map":{"version":3,"names":["class","id","key","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_normalizeClass","active","_ctx","consumptionTab","onClick","_cache","$event","_hoisted_8","for","selectedGroupBy","onChange","args","fetchConsumptionData","_Fragment","_renderList","groupOptions","option","value","text","_hoisted_9","_hoisted_10","_hoisted_11","paginatedData","data","index","_toDisplayString","Date","interval_start","toLocaleString","dateStyle","timeStyle","interval_end","consumption","_hoisted_12","prevPage","disabled","currentPage","_hoisted_13","_hoisted_14","nextPage","pageSize","consumptionData","length","_hoisted_15","_hoisted_16","_hoisted_17","selectedPredictedPeriod","fetchPrediction","_hoisted_18","predictedEnergy","_hoisted_19","_hoisted_20","_hoisted_21","solarEnergyData","_hoisted_22","_hoisted_23","_hoisted_24","_createTextVNode","acpower","yieldtoday","soc","yieldtotal","loadSolarData","fetchSolarPredictions","solarPredictions","_hoisted_25","_hoisted_26","solarTab","_hoisted_27","_hoisted_28","_hoisted_29","toFixed","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_createVNode","_component_WeatherView"],"sources":["C:\\Users\\Jamaa\\Final Year Project\\frontend\\src\\components\\EnergyData.vue"],"sourcesContent":["<template>\r\n    <div class=\"container py-4\">\r\n        <h1 class=\"text-center text-primary mb-4\">Smart Home Energy Dashboard</h1>\r\n        <div class=\"row\">\r\n            <!-- Energy Data Card -->\r\n            <div class=\"col-md-6\">\r\n                <div class=\"card shadow-sm mb-4\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title text-dark\">Electricity Consumption</h4>\r\n                        <!-- Tabs -->\r\n                        <ul class=\"nav nav-tabs\" id=\"consumptionTabs\">\r\n                            <li class=\"nav-item\">\r\n                                <a class=\"nav-link\" :class=\"{ active: consumptionTab === 'table' }\" @click=\"consumptionTab = 'table'\">Table</a>\r\n                            </li>\r\n                            <li class=\"nav-item\">\r\n                                <a class=\"nav-link\" :class=\"{ active: consumptionTab === 'chart' }\" @click=\"consumptionTab = 'chart'\">Chart</a>\r\n                            </li>\r\n                        </ul>\r\n                        <!-- Group By Dropdown --> \r\n                        <label for=\"group-by\">Group Consumption Data By:</label>\r\n                        <select id=\"group-by\" v-model=\"selectedGroupBy\" class=\"form-control\" @change=\"fetchConsumptionData\">\r\n                            <option v-for=\"option in groupOptions\" :key=\"option.value\" :value=\"option.value\">\r\n                                {{ option.text }}\r\n                            </option>\r\n                        </select>\r\n                        <!-- Tab contents -->\r\n                        <div v-if=\"consumptionTab === 'table'\">\r\n                            <!-- Bootstrap Table -->\r\n                            <table class=\"table table-bordered table-striped mt-3\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Start Time</th>\r\n                                        <th>End Time</th>\r\n                                        <th>Consumption (kWh)</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr v-for=\"(data, index) in paginatedData\" :key=\"index\">\r\n                                        <td>{{ new Date(data.interval_start).toLocaleString('en-GB', { dateStyle: 'short', timeStyle: 'short' }) }}</td>\r\n                                        <td>{{ new Date(data.interval_end).toLocaleString('en-GB', { dateStyle: 'short', timeStyle: 'short' }) }}</td>\r\n                                        <td>{{ data.consumption }}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <!-- Pagination -->\r\n                            <div class=\"pagination-controls mt-3\">\r\n                                <button @click=\"prevPage\" :disabled=\"currentPage === 1\" class=\"btn btn-secondary\">Previous</button>\r\n                                <span class=\"mx-2\">Page {{ currentPage }}</span>\r\n                                <button @click=\"nextPage\" :disabled=\"currentPage * pageSize >= consumptionData.length\" class=\"btn btn-secondary\">Next</button>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div v-if=\"consumptionTab === 'chart'\" class=\"mt-3\">\r\n                            <canvas ref=\"energyChartCanvas\"></canvas>\r\n                        </div>\r\n\r\n                        <!-- Prediction dropdown-->\r\n                        <label for=\"prediction-period\">Predict Energy Usage For:</label>\r\n                        <select id=\"prediction-period\" v-model=\"selectedPredictedPeriod\" class=\"form-control\">\r\n                            <option value=\"hour\">Next Hour</option>\r\n                            <option value=\"day\">Next Day</option>\r\n                            <option value=\"week\">Next 7 Days</option>\r\n                        </select>\r\n\r\n                        <button @click=\"fetchPrediction\" class=\"btn btn-primary mt-3\">Predict energy usage</button>\r\n                        <!-- Prediction table for energy usgage -->\r\n                        <div v-if=\"consumptionTab === 'table'\">\r\n                            <table v-if=\"predictedEnergy.length\" class=\"table table-bordered table-striped mt-3\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Hour</th>\r\n                                        <th>Predicted Energy </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr v-for=\"(data, index) in predictedEnergy\" :key=\"index\">\r\n                                        <td>Hour {{ index + 1 }}</td>\r\n                                        <td>{{ data }}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <!-- Chart for predicted energy usage -->\r\n                        <div v-if=\"consumptionTab === 'chart'\">\r\n                            <canvas ref=\"chartCanvas\"></canvas>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- Solar Energy Data -->\r\n            <div v-if=\"solarEnergyData\" class=\"col-md-6\">\r\n                <div class=\"card shadown-sm mb-4\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title text-dark\">Solar Energy Data</h4>\r\n                        <p><strong>Current Solar Power:</strong> {{ solarEnergyData.acpower }}W</p>\r\n                        <p><strong>Daily Yield:</strong> {{ solarEnergyData.yieldtoday }}kWh</p>\r\n                        <p><strong>Battery Power Percentage:</strong> {{ solarEnergyData.soc }}%</p>\r\n                        <p><strong>Total Yield</strong> {{ solarEnergyData.yieldtotal }}kWh</p>\r\n                        <button @click=\"loadSolarData\" class=\"btn btn-primary mt-3\">Refresh data</button>\r\n\r\n                        <button @click=\"fetchSolarPredictions\" class=\"btn btn-primary\">Predict Solar Power</button>\r\n                        <!-- Tabs -->\r\n                        <ul v-if=\"solarPredictions.length\" class=\"nav nav-tabs\" id=\"solarTabs\">\r\n                            <li class=\"nav-item\">\r\n                                <a class=\"nav-link\" :class=\"{ active: solarTab === 'table' }\" @click=\"solarTab = 'table'\">Table</a>\r\n                            </li>\r\n                            <li class=\"nav-item\">\r\n                                <a class=\"nav-link\" :class=\"{ active: solarTab === 'chart' }\" @click=\"solarTab = 'chart'\">Chart</a>\r\n                            </li>\r\n                        </ul>\r\n                        <!-- Tab contents -->\r\n                        <div v-if=\"solarTab === 'table'\">\r\n                            <!-- Prediction table for solar power -->\r\n                            <table v-if=\"solarPredictions.length\" class=\"table table-bordered table-striped mt-3\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Hour</th>\r\n                                        <th>Predicted Power (W)</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr v-for=\"(data, index) in solarPredictions\" :key=\"index\">\r\n                                        <td>Hour {{ index + 1 }}</td>\r\n                                        <td>{{ data.toFixed(2) }} W</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <!-- Chart for solar predictions-->\r\n                        <div v-if=\"solarTab === 'chart'\" class=\"mt-3\">\r\n                            <canvas ref=\"solarChartCanvas\"></canvas>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <div class=\"card shadow-sm\">\r\n                    <div class=\"card-body text-center\">\r\n                        <WeatherView></WeatherView>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport apiClient from '@/services/api';\r\nimport axios from 'axios'\r\nimport { onMounted, ref, computed, watch, nextTick} from 'vue'\r\nimport { Chart, registerables} from 'chart.js'\r\nimport WeatherView from './WeatherView.vue';\r\n\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n    components: {\r\n        WeatherView\r\n    },\r\n    setup() {\r\n        const energyData = ref([])\r\n        const octopusData = ref([])\r\n        const solarData = ref([])\r\n        const solarPredictions = ref([])\r\n        const weatherData = ref([])\r\n        const chartCanvas = ref(null);\r\n        const solarChartCanvas = ref(null);\r\n        const energyChartCanvas = ref(null);\r\n        const solarEnergyData = ref(null)\r\n        let energyChartInstance = null\r\n        let chartInstance = null\r\n        let solarChartInstance = null\r\n        const consumptionData = ref([])\r\n        const currentPage = ref(1)\r\n        const solarPredictionPage = ref(1)\r\n        const energyPredictionPage = ref(1)\r\n        const pageSize = 10\r\n        const selectedGroupBy = ref(\"hour\")\r\n        const last7DaysEnergyData = ref([])\r\n        const predictedEnergy = ref([])\r\n        const selectedPredictedPeriod = ref(\"hour\")\r\n        const user = ref([])\r\n        const consumptionTab = ref(\"table\")\r\n        const solarTab = ref(\"table\")\r\n        const groupOptions = ref([\r\n            { value: \"hour\", text: \"Hourly\" },\r\n            { value: \"day\", text: \"Daily\" },\r\n            { value: \"week\", text: \"Weekly\" },\r\n            { value: \"month\", text: \"Monthly\" }\r\n        ])\r\n\r\n        const fetchConsumptionData = () => {\r\n            axios.get(\"http://127.0.0.1:8000/api/octopus-data/\", {\r\n                params: {\r\n                    group_by: selectedGroupBy.value,\r\n                    page_size: 200,\r\n                    user: user.value,\r\n                }\r\n            }).then(response => {\r\n                console.log(\"Consumption data:\", response.data.results)\r\n                consumptionData.value = response.data.results\r\n                currentPage.value = 1\r\n\r\n                last7DaysEnergyData.value = response.data.results.slice(-168)\r\n                console.log(\"Last 7 days energy data: \" + last7DaysEnergyData.value)\r\n                updateEnergyConsumptionChart();\r\n            }).catch(error => {\r\n                console.error('Error fetching data:', error);\r\n            })\r\n        }\r\n\r\n        // Paginated data computation\r\n        const paginatedData = computed(() => {\r\n            const start = (currentPage.value - 1) * pageSize;\r\n            return consumptionData.value.slice(start, start + pageSize);\r\n        });\r\n\r\n        const paginatedSolarPredictions = \r\n\r\n        const nextPage = () => {\r\n            if (currentPage.value * pageSize < consumptionData.value.length) {\r\n                currentPage.value++;\r\n            }\r\n        };\r\n\r\n        const prevPage = () => {\r\n            if (currentPage.value > 1) {\r\n                currentPage.value--;\r\n            }\r\n        };\r\n\r\n        const fetchEnergyData = () => {\r\n            apiClient.get('energy-data/')\r\n               .then(response => {\r\n                    console.log(\"Energy Data:\", response.data);\r\n                    energyData.value = response.data;\r\n                })\r\n               .catch(error => {\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        };\r\n\r\n        const fetchSolarData = () => {\r\n            apiClient.get('solar-data/')\r\n               .then(response => {\r\n                    console.log(\"Get Solar Data:\", response.data);\r\n                    solarData.value = response.data;\r\n                })\r\n               .catch(error => {\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        };\r\n\r\n        const loadSolarData = async () => {\r\n            try {\r\n                console.log(\"Current user solar data:\", user);\r\n                const response = await axios.get('http://127.0.0.1:8000/api/solax-data/', {\r\n                    params: {\r\n                        wifiSn: 'SV8RYX9GZU',\r\n                        user: user.value,\r\n                    }\r\n                })\r\n                console.log(\"Load Solar Data:\", response.data);\r\n                solarEnergyData.value = response.data.result;\r\n                // updateChart();\r\n            } catch(error) {\r\n                console.error('Error fetching solar data:', error);\r\n            };\r\n        };\r\n\r\n        // NOT CURRENTLY NEEDED AS FETCHCONSUMPTION METHOD DOES SAME THING \r\n        const loadOctopusData = () => {\r\n            console.log(\"Current user octopus data:\", user);\r\n            axios.get(\"http://127.0.0.1:8000/api/octopus-data/\")\r\n            .then(response => {\r\n                 console.log(\"Octopus Data:\", response.data);\r\n                 octopusData.value = response.data.results;\r\n                 updateChart();\r\n             }).catch((error) => {\r\n                console.error('Error fetching octopus data:', error);\r\n             });\r\n        }\r\n\r\n        const fetchWeatherData = () => {\r\n            // apiClient.get('weather-data/')\r\n            axios.get(\"http://127.0.0.1:8000/api/weather-data/\")\r\n               .then(response => {\r\n                    console.log(\"Get Weather Data:\", response.data);\r\n                    weatherData.value = response.data;\r\n                })\r\n               .catch(error => {\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        };\r\n\r\n        const fetchPrediction = async () => {\r\n            try {\r\n                const consumptionHistoryEnergyData = ref([])\r\n                consumptionHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => entry.consumption)\r\n                const hourHistoryEnergyData = ref([])\r\n                hourHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => new Date(entry.interval_start).getHours() / 23);\r\n                const dayHistoryEnergyData = ref([])\r\n                dayHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => new Date(entry.interval_start).getDay() / 6);\r\n                const monthHistoryEnergyData = ref([])\r\n                monthHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => (new Date(entry.interval_start).getMonth() + 1) / 12);\r\n                console.log(\"Fetching prediction for period:\", selectedPredictedPeriod.value);\r\n                const response = await axios.post(\"http://127.0.0.1:5001/predict-energy\", {\r\n                    consumption_history: consumptionHistoryEnergyData.value,\r\n                    hour: hourHistoryEnergyData.value,\r\n                    day: dayHistoryEnergyData.value,\r\n                    month: monthHistoryEnergyData.value,\r\n                    prediction_period: selectedPredictedPeriod.value,\r\n                });\r\n                console.log(\"Predicted energy usage:\", response.data.predicted_energy_usage);\r\n                // predictedEnergy.value = response.data.predicted_energy_usage.map(value => value.toFixed(2) + \" kWh\");\r\n                predictedEnergy.value = response.data.predicted_energy_usage.map(value => Math.max(0, value).toFixed(2) + \" kWh\");\r\n                updateEnergyPredictionsChart();\r\n            } catch (error) {\r\n                console.error('Error fetching prediction:', error);\r\n                predictedEnergy.value = \"Error fetching prediction\";\r\n            }\r\n            \r\n        }\r\n\r\n        const fetchSolarPredictions = async () => { \r\n            const user = await getCurrentUser();\r\n            console.log(\"Current user:\", user);\r\n            try {\r\n                if (solarData.value.length < 48) { \r\n                    console.error('Not enough solar data to predict');\r\n                    return;\r\n                }\r\n\r\n                const formattedSolarData = solarData.value.slice(-48).map(entry => ({\r\n                    ac_power: entry.ac_power,\r\n                    yield_today: entry.yield_today\r\n                }))\r\n\r\n                const formattedWeatherData = weatherData.value.slice(-48).map(entry => ({\r\n                    temperature: entry.temperature,\r\n                    humidity: entry.humidity,\r\n                    wind_speed: entry.wind_speed,\r\n                    clouds: entry.clouds\r\n                }))\r\n\r\n                const response = await axios.post(\"http://127.0.0.1:5001/predict-solar\", {\r\n                    solar_history: formattedSolarData, \r\n                    weather_history: formattedWeatherData\r\n                })\r\n\r\n                console.log(\"Predicted solar energy usage:\", response.data.solar_prediction);\r\n                // solarPredictions.value = response.data.solar_prediction\r\n                solarPredictions.value = response.data.solar_prediction.map((val) => Math.max(0, val));\r\n                updateSolarChart();\r\n            } catch (error) {\r\n                console.error('Error fetching prediction:', error);\r\n                // solarPredictions.value = \"Error fetching prediction\";\r\n            }\r\n        }\r\n\r\n        const updateEnergyPredictionsChart = () => {\r\n            console.log(\"Energy chart\" + chartCanvas.value)\r\n            if (!chartCanvas.value || predictedEnergy.value.length === 0) return;\r\n            const ctx = chartCanvas.value.getContext(\"2d\");\r\n            if (chartInstance) chartInstance.destroy();\r\n            chartInstance = new Chart(ctx, {\r\n                type: 'line',\r\n                data: {\r\n                labels: predictedEnergy.value.map((_, i) => `Hour ${i + 1}`),\r\n                datasets: [{\r\n                    label: \"Predicted Energy Usage\",\r\n                    data: predictedEnergy.value.map(val => parseFloat(val)),\r\n                    borderColor: \"#007bff\",\r\n                    fill: false\r\n                }]\r\n                },\r\n                options: { responsive: true, scales: { y: { beginAtZero: true } } }\r\n            });\r\n        }\r\n\r\n        const updateEnergyConsumptionChart = () => {\r\n            console.log(\"Energy consumption chart\" + energyChartCanvas.value)\r\n            console.log(\"Energy consumption data\" + consumptionData.value)\r\n            if (!energyChartCanvas.value || consumptionData.value.length === 0) return;\r\n            const ctx = energyChartCanvas.value.getContext(\"2d\");\r\n            if (energyChartInstance) energyChartInstance.destroy();\r\n            energyChartInstance = new Chart(ctx, {\r\n                type: 'line',\r\n                data: {\r\n                    labels: consumptionData.value.map((_, i) => `Hour ${i + 1}`),\r\n                    datasets: [{\r\n                        label: \"Energy Consumption\",\r\n                        data: consumptionData.value.map(val => parseFloat(val.consumption)),\r\n                        borderColor: \"#007bff\",\r\n                        fill: false\r\n                    }]\r\n                },\r\n                options: { responsive: true, scales: { y: { beginAtZero: true } } }\r\n            });\r\n        }\r\n\r\n        const updateSolarChart = () => {\r\n            console.log(\"Solar Char\" + solarChartCanvas)\r\n            if (!solarChartCanvas.value || solarPredictions.value.length === 0) return;\r\n            const ctx = solarChartCanvas.value.getContext(\"2d\");\r\n            if (solarChartInstance) solarChartInstance.destroy();\r\n            solarChartInstance = new Chart(ctx, {\r\n                type: 'line',\r\n                data: {\r\n                    labels: solarPredictions.value.map((_, i) => `Hour ${i + 1}`),\r\n                    datasets: [{\r\n                        label: \"Predicted Solar Power\",\r\n                        data: solarPredictions.value.map(val => parseFloat(val)),\r\n                        borderColor: \"#28a745\",\r\n                        fill: false\r\n                    }]\r\n                },\r\n                options: { responsive: true, scales: { y: { beginAtZero: true } } }\r\n            });\r\n        }\r\n\r\n        const getCurrentUser = async () => {\r\n            const response = await apiClient.get(\"/api/current-user/\");\r\n            return response.data;\r\n        }\r\n\r\n        onMounted(async () => {\r\n            // fetchEnergyData();\r\n            // fetchSolarData();\r\n            try {\r\n                user.value = await getCurrentUser();\r\n                // user.value = getUser.data;\r\n                console.log(\"User data:\", user.value);\r\n                // console.log(\"Current user:\", getUser);\r\n                await loadSolarData();\r\n                await fetchSolarData();\r\n                // loadOctopusData();\r\n                await fetchConsumptionData(); \r\n                fetchWeatherData();\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n            \r\n        });\r\n\r\n        watch(consumptionTab, async () => {\r\n            if (consumptionTab.value === 'chart'){\r\n                await nextTick();\r\n                updateEnergyConsumptionChart();\r\n                updateEnergyPredictionsChart();\r\n            } \r\n        });\r\n\r\n        watch(solarTab, async () => {\r\n            if (solarTab.value === 'chart') {\r\n                await nextTick();\r\n                updateSolarChart()\r\n            };\r\n        });\r\n\r\n        return {\r\n            energyData,\r\n            chartCanvas,\r\n            solarChartCanvas,\r\n            energyChartCanvas,\r\n            solarEnergyData,\r\n            loadSolarData,\r\n            solarData,\r\n            octopusData,\r\n            consumptionData,\r\n            currentPage,\r\n            pageSize,\r\n            selectedGroupBy,\r\n            groupOptions,\r\n            paginatedData,\r\n            // updateChart,\r\n            nextPage,\r\n            prevPage,\r\n            fetchConsumptionData,\r\n            WeatherView,\r\n            last7DaysEnergyData,\r\n            predictedEnergy,\r\n            selectedPredictedPeriod,\r\n            fetchPrediction,\r\n            solarPredictions,\r\n            fetchSolarPredictions,\r\n            consumptionTab,\r\n            solarTab,\r\n        };\r\n    }\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}