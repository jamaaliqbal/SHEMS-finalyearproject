{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport apiClient from '@/services/api';\nimport axios from 'axios';\nimport { onMounted, ref, computed, watch, nextTick } from 'vue';\nimport { Chart, registerables } from 'chart.js';\nimport WeatherView from './WeatherView.vue';\nChart.register(...registerables);\nexport default {\n  components: {\n    WeatherView\n  },\n  setup() {\n    const energyData = ref([]);\n    const octopusData = ref([]);\n    const solarData = ref([]);\n    const solarPredictions = ref([]);\n    const weatherData = ref([]);\n    const chartCanvas = ref(null);\n    const solarChartCanvas = ref(null);\n    const energyChartCanvas = ref(null);\n    const solarEnergyData = ref(null);\n    let energyChartInstance = null;\n    let chartInstance = null;\n    let solarChartInstance = null;\n    const consumptionData = ref([]);\n    const currentPage = ref(1);\n    const solarPredictionPage = ref(1);\n    const energyPredictionPage = ref(1);\n    const pageSize = 10;\n    const selectedGroupBy = ref(\"hour\");\n    const last7DaysEnergyData = ref([]);\n    const predictedEnergy = ref([]);\n    const selectedPredictedPeriod = ref(\"hour\");\n    const user = ref([]);\n    const consumptionTab = ref(\"table\");\n    const solarTab = ref(\"table\");\n    const groupOptions = ref([{\n      value: \"hour\",\n      text: \"Hourly\"\n    }, {\n      value: \"day\",\n      text: \"Daily\"\n    }, {\n      value: \"week\",\n      text: \"Weekly\"\n    }, {\n      value: \"month\",\n      text: \"Monthly\"\n    }]);\n    const fetchConsumptionData = () => {\n      axios.get(\"http://127.0.0.1:8000/api/octopus-data/\", {\n        params: {\n          group_by: selectedGroupBy.value,\n          page_size: 200,\n          user: user.value\n        }\n      }).then(response => {\n        console.log(\"Consumption data:\", response.data.results);\n        consumptionData.value = response.data.results;\n        currentPage.value = 1;\n        last7DaysEnergyData.value = response.data.results.slice(-168);\n        console.log(\"Last 7 days energy data: \" + last7DaysEnergyData.value);\n        updateEnergyConsumptionChart();\n      }).catch(error => {\n        console.error('Error fetching data:', error);\n      });\n    };\n\n    // Paginated data computation\n    const paginatedData = computed(() => {\n      const start = (currentPage.value - 1) * pageSize;\n      return consumptionData.value.slice(start, start + pageSize);\n    });\n    const paginatedSolarPredictions = computed(() => {\n      const start = (solarPredictionPage.value - 1) * pageSize;\n      return solarPredictions.value.slice(start, start + pageSize);\n    });\n    const paginatedEnergyPredictions = computed(() => {\n      const start = (energyPredictionPage.value - 1) * pageSize;\n      return predictedEnergy.value.slice(start, start + pageSize);\n    });\n    const nextPage = type => {\n      if (type === 'energyConsumption') {\n        if (currentPage.value * pageSize < consumptionData.value.length) {\n          currentPage.value++;\n        }\n      } else if (type === 'solar') {\n        if (solarPredictionPage.value * pageSize < solarPredictions.value.length) {\n          solarPredictionPage.value++;\n        }\n      } else if (type === 'energyPredictions') {\n        if (energyPredictionPage.value * pageSize < predictedEnergy.value.length) {\n          energyPredictionPage.value++;\n        }\n      }\n      // if (currentPage.value * pageSize < consumptionData.value.length) {\n      //     currentPage.value++;\n      // }\n    };\n    const prevPage = type => {\n      if (type === 'energyConsumption') {\n        if (currentPage.value > 1) {\n          currentPage.value--;\n        }\n      } else if (type === 'solar') {\n        if (solarPredictionPage.value > 1) {\n          solarPredictionPage.value--;\n        }\n      } else if (type === 'energyPredictions') {\n        if (energyPredictionPage.value > 1) {\n          energyPredictionPage.value--;\n        }\n      }\n      // if (currentPage.value > 1) {\n      //     currentPage.value--;\n      // }\n    };\n    const fetchEnergyData = () => {\n      apiClient.get('energy-data/').then(response => {\n        console.log(\"Energy Data:\", response.data);\n        energyData.value = response.data;\n      }).catch(error => {\n        console.error('Error fetching data:', error);\n      });\n    };\n    const fetchSolarData = () => {\n      apiClient.get('solar-data/').then(response => {\n        console.log(\"Get Solar Data:\", response.data);\n        solarData.value = response.data;\n      }).catch(error => {\n        console.error('Error fetching data:', error);\n      });\n    };\n    const loadSolarData = async () => {\n      try {\n        console.log(\"Current user solar data:\", user);\n        const response = await axios.get('http://127.0.0.1:8000/api/solax-data/', {\n          params: {\n            wifiSn: 'SV8RYX9GZU',\n            user: user.value\n          }\n        });\n        console.log(\"Load Solar Data:\", response.data);\n        solarEnergyData.value = response.data.result;\n        // updateChart();\n      } catch (error) {\n        console.error('Error fetching solar data:', error);\n      }\n      ;\n    };\n\n    // NOT CURRENTLY NEEDED AS FETCHCONSUMPTION METHOD DOES SAME THING \n    const loadOctopusData = () => {\n      console.log(\"Current user octopus data:\", user);\n      axios.get(\"http://127.0.0.1:8000/api/octopus-data/\").then(response => {\n        console.log(\"Octopus Data:\", response.data);\n        octopusData.value = response.data.results;\n        updateChart();\n      }).catch(error => {\n        console.error('Error fetching octopus data:', error);\n      });\n    };\n    const fetchWeatherData = () => {\n      // apiClient.get('weather-data/')\n      axios.get(\"http://127.0.0.1:8000/api/weather-data/\").then(response => {\n        console.log(\"Get Weather Data:\", response.data);\n        weatherData.value = response.data;\n      }).catch(error => {\n        console.error('Error fetching data:', error);\n      });\n    };\n    const fetchPrediction = async () => {\n      try {\n        const consumptionHistoryEnergyData = ref([]);\n        consumptionHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => entry.consumption);\n        const hourHistoryEnergyData = ref([]);\n        hourHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => new Date(entry.interval_start).getHours() / 23);\n        const dayHistoryEnergyData = ref([]);\n        dayHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => new Date(entry.interval_start).getDay() / 6);\n        const monthHistoryEnergyData = ref([]);\n        monthHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => (new Date(entry.interval_start).getMonth() + 1) / 12);\n        console.log(\"Fetching prediction for period:\", selectedPredictedPeriod.value);\n        const response = await axios.post(\"http://127.0.0.1:5001/predict-energy\", {\n          consumption_history: consumptionHistoryEnergyData.value,\n          hour: hourHistoryEnergyData.value,\n          day: dayHistoryEnergyData.value,\n          month: monthHistoryEnergyData.value,\n          prediction_period: selectedPredictedPeriod.value\n        });\n        console.log(\"Predicted energy usage:\", response.data.predicted_energy_usage);\n        // predictedEnergy.value = response.data.predicted_energy_usage.map(value => value.toFixed(2) + \" kWh\");\n        predictedEnergy.value = response.data.predicted_energy_usage.map(value => Math.max(0, value).toFixed(2) + \" kWh\");\n        updateEnergyPredictionsChart();\n      } catch (error) {\n        console.error('Error fetching prediction:', error);\n        predictedEnergy.value = \"Error fetching prediction\";\n      }\n    };\n    const fetchSolarPredictions = async () => {\n      const user = await getCurrentUser();\n      console.log(\"Current user:\", user);\n      try {\n        if (solarData.value.length < 48) {\n          console.error('Not enough solar data to predict');\n          return;\n        }\n        const formattedSolarData = solarData.value.slice(-48).map(entry => ({\n          ac_power: entry.ac_power,\n          yield_today: entry.yield_today\n        }));\n        const formattedWeatherData = weatherData.value.slice(-48).map(entry => ({\n          temperature: entry.temperature,\n          humidity: entry.humidity,\n          wind_speed: entry.wind_speed,\n          clouds: entry.clouds\n        }));\n        const response = await axios.post(\"http://127.0.0.1:5001/predict-solar\", {\n          solar_history: formattedSolarData,\n          weather_history: formattedWeatherData\n        });\n        console.log(\"Predicted solar energy usage:\", response.data.solar_prediction);\n        // solarPredictions.value = response.data.solar_prediction\n        solarPredictions.value = response.data.solar_prediction.map(val => Math.max(0, val));\n        updateSolarChart();\n      } catch (error) {\n        console.error('Error fetching prediction:', error);\n        // solarPredictions.value = \"Error fetching prediction\";\n      }\n    };\n    const updateEnergyPredictionsChart = () => {\n      console.log(\"Energy chart\" + chartCanvas.value);\n      if (!chartCanvas.value || predictedEnergy.value.length === 0) return;\n      const ctx = chartCanvas.value.getContext(\"2d\");\n      if (chartInstance) chartInstance.destroy();\n      chartInstance = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: predictedEnergy.value.map((_, i) => `Hour ${i + 1}`),\n          datasets: [{\n            label: \"Predicted Energy Usage\",\n            data: predictedEnergy.value.map(val => parseFloat(val)),\n            borderColor: \"#007bff\",\n            fill: false\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    };\n    const updateEnergyConsumptionChart = () => {\n      console.log(\"Energy consumption chart\" + energyChartCanvas.value);\n      console.log(\"Energy consumption data\" + consumptionData.value);\n      if (!energyChartCanvas.value || consumptionData.value.length === 0) return;\n      const ctx = energyChartCanvas.value.getContext(\"2d\");\n      if (energyChartInstance) energyChartInstance.destroy();\n      energyChartInstance = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: consumptionData.value.map((_, i) => `Hour ${i + 1}`),\n          datasets: [{\n            label: \"Energy Consumption\",\n            data: consumptionData.value.map(val => parseFloat(val.consumption)),\n            borderColor: \"#007bff\",\n            fill: false\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    };\n    const updateSolarChart = () => {\n      console.log(\"Solar Char\" + solarChartCanvas);\n      if (!solarChartCanvas.value || solarPredictions.value.length === 0) return;\n      const ctx = solarChartCanvas.value.getContext(\"2d\");\n      if (solarChartInstance) solarChartInstance.destroy();\n      solarChartInstance = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: solarPredictions.value.map((_, i) => `Hour ${i + 1}`),\n          datasets: [{\n            label: \"Predicted Solar Power\",\n            data: solarPredictions.value.map(val => parseFloat(val)),\n            borderColor: \"#28a745\",\n            fill: false\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    };\n    const getCurrentUser = async () => {\n      const response = await apiClient.get(\"/api/current-user/\");\n      return response.data;\n    };\n    onMounted(async () => {\n      // fetchEnergyData();\n      // fetchSolarData();\n      try {\n        user.value = await getCurrentUser();\n        // user.value = getUser.data;\n        console.log(\"User data:\", user.value);\n        // console.log(\"Current user:\", getUser);\n        await loadSolarData();\n        await fetchSolarData();\n        // loadOctopusData();\n        await fetchConsumptionData();\n        fetchWeatherData();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    });\n    watch(consumptionTab, async () => {\n      if (consumptionTab.value === 'chart') {\n        await nextTick();\n        updateEnergyConsumptionChart();\n        updateEnergyPredictionsChart();\n      }\n    });\n    watch(solarTab, async () => {\n      if (solarTab.value === 'chart') {\n        await nextTick();\n        updateSolarChart();\n      }\n      ;\n    });\n    return {\n      energyData,\n      chartCanvas,\n      solarChartCanvas,\n      energyChartCanvas,\n      solarEnergyData,\n      loadSolarData,\n      solarData,\n      octopusData,\n      consumptionData,\n      currentPage,\n      pageSize,\n      selectedGroupBy,\n      groupOptions,\n      paginatedData,\n      // updateChart,\n      nextPage,\n      prevPage,\n      fetchConsumptionData,\n      WeatherView,\n      last7DaysEnergyData,\n      predictedEnergy,\n      selectedPredictedPeriod,\n      fetchPrediction,\n      solarPredictions,\n      fetchSolarPredictions,\n      consumptionTab,\n      solarTab\n    };\n  }\n};","map":{"version":3,"names":["apiClient","axios","onMounted","ref","computed","watch","nextTick","Chart","registerables","WeatherView","register","components","setup","energyData","octopusData","solarData","solarPredictions","weatherData","chartCanvas","solarChartCanvas","energyChartCanvas","solarEnergyData","energyChartInstance","chartInstance","solarChartInstance","consumptionData","currentPage","solarPredictionPage","energyPredictionPage","pageSize","selectedGroupBy","last7DaysEnergyData","predictedEnergy","selectedPredictedPeriod","user","consumptionTab","solarTab","groupOptions","value","text","fetchConsumptionData","get","params","group_by","page_size","then","response","console","log","data","results","slice","updateEnergyConsumptionChart","catch","error","paginatedData","start","paginatedSolarPredictions","paginatedEnergyPredictions","nextPage","type","length","prevPage","fetchEnergyData","fetchSolarData","loadSolarData","wifiSn","result","loadOctopusData","updateChart","fetchWeatherData","fetchPrediction","consumptionHistoryEnergyData","map","entry","consumption","hourHistoryEnergyData","Date","interval_start","getHours","dayHistoryEnergyData","getDay","monthHistoryEnergyData","getMonth","post","consumption_history","hour","day","month","prediction_period","predicted_energy_usage","Math","max","toFixed","updateEnergyPredictionsChart","fetchSolarPredictions","getCurrentUser","formattedSolarData","ac_power","yield_today","formattedWeatherData","temperature","humidity","wind_speed","clouds","solar_history","weather_history","solar_prediction","val","updateSolarChart","ctx","getContext","destroy","labels","_","i","datasets","label","parseFloat","borderColor","fill","options","responsive","scales","y","beginAtZero"],"sources":["C:\\Users\\Jamaa\\Final Year Project\\frontend\\src\\components\\EnergyData.vue"],"sourcesContent":["<template>\r\n    <div class=\"container py-4\">\r\n        <h1 class=\"text-center text-primary mb-4\">Smart Home Energy Dashboard</h1>\r\n        <div class=\"row\">\r\n            <!-- Energy Data Card -->\r\n            <div class=\"col-md-6\">\r\n                <div class=\"card shadow-sm mb-4\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title text-dark\">Electricity Consumption</h4>\r\n                        <!-- Tabs -->\r\n                        <ul class=\"nav nav-tabs\" id=\"consumptionTabs\">\r\n                            <li class=\"nav-item\">\r\n                                <a class=\"nav-link\" :class=\"{ active: consumptionTab === 'table' }\" @click=\"consumptionTab = 'table'\">Table</a>\r\n                            </li>\r\n                            <li class=\"nav-item\">\r\n                                <a class=\"nav-link\" :class=\"{ active: consumptionTab === 'chart' }\" @click=\"consumptionTab = 'chart'\">Chart</a>\r\n                            </li>\r\n                        </ul>\r\n                        <!-- Group By Dropdown --> \r\n                        <label for=\"group-by\">Group Consumption Data By:</label>\r\n                        <select id=\"group-by\" v-model=\"selectedGroupBy\" class=\"form-control\" @change=\"fetchConsumptionData\">\r\n                            <option v-for=\"option in groupOptions\" :key=\"option.value\" :value=\"option.value\">\r\n                                {{ option.text }}\r\n                            </option>\r\n                        </select>\r\n                        <!-- Tab contents -->\r\n                        <div v-if=\"consumptionTab === 'table'\">\r\n                            <!-- Bootstrap Table -->\r\n                            <table class=\"table table-bordered table-striped mt-3\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Start Time</th>\r\n                                        <th>End Time</th>\r\n                                        <th>Consumption (kWh)</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr v-for=\"(data, index) in paginatedData\" :key=\"index\">\r\n                                        <td>{{ new Date(data.interval_start).toLocaleString('en-GB', { dateStyle: 'short', timeStyle: 'short' }) }}</td>\r\n                                        <td>{{ new Date(data.interval_end).toLocaleString('en-GB', { dateStyle: 'short', timeStyle: 'short' }) }}</td>\r\n                                        <td>{{ data.consumption }}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <!-- Pagination -->\r\n                            <div class=\"pagination-controls mt-3\">\r\n                                <button @click=\"prevPage('energyConsumption')\" :disabled=\"currentPage === 1\" class=\"btn btn-secondary\">Previous</button>\r\n                                <span class=\"mx-2\">Page {{ currentPage }}</span>\r\n                                <button @click=\"nextPage('energyConsumption')\" :disabled=\"currentPage * pageSize >= consumptionData.length\" class=\"btn btn-secondary\">Next</button>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div v-if=\"consumptionTab === 'chart'\" class=\"mt-3\">\r\n                            <canvas ref=\"energyChartCanvas\"></canvas>\r\n                        </div>\r\n\r\n                        <!-- Prediction dropdown-->\r\n                        <label for=\"prediction-period\">Predict Energy Usage For:</label>\r\n                        <select id=\"prediction-period\" v-model=\"selectedPredictedPeriod\" class=\"form-control\">\r\n                            <option value=\"hour\">Next Hour</option>\r\n                            <option value=\"day\">Next Day</option>\r\n                            <option value=\"week\">Next 7 Days</option>\r\n                        </select>\r\n\r\n                        <button @click=\"fetchPrediction\" class=\"btn btn-primary mt-3\">Predict energy usage</button>\r\n                        <!-- Prediction table for energy usgage -->\r\n                        <div v-if=\"consumptionTab === 'table'\">\r\n                            <table v-if=\"predictedEnergy.length\" class=\"table table-bordered table-striped mt-3\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Hour</th>\r\n                                        <th>Predicted Energy </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr v-for=\"(data, index) in paginatedEnergyPredictions\" :key=\"index\">\r\n                                        <td>Hour {{ index + 1 }}</td>\r\n                                        <td>{{ data }}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                            <!-- Pagination for energy predictions -->\r\n                            <div class=\"pagination-controls mt-3\">\r\n                                <button @click=\"prevPage('energyPredictions')\" :disabled=\"energyPredictionPage === 1\" class=\"btn btn-secondary\">Previous</button>\r\n                                <span class=\"mx-2\">Page {{ energyPredictionPage }}</span>\r\n                                <button @click=\"nextPage('energyPredictions')\" :disabled=\"energyPredictionPage * pageSize >= predictedEnergy.length\" class=\"btn btn-secondary\">Next</button>\r\n                            </div>\r\n                        </div>\r\n                        <!-- Chart for predicted energy usage -->\r\n                        <div v-if=\"consumptionTab === 'chart'\">\r\n                            <canvas ref=\"chartCanvas\"></canvas>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- Solar Energy Data -->\r\n            <div v-if=\"solarEnergyData\" class=\"col-md-6\">\r\n                <div class=\"card shadown-sm mb-4\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title text-dark\">Solar Energy Data</h4>\r\n                        <p><strong>Current Solar Power:</strong> {{ solarEnergyData.acpower }}W</p>\r\n                        <p><strong>Daily Yield:</strong> {{ solarEnergyData.yieldtoday }}kWh</p>\r\n                        <p><strong>Battery Power Percentage:</strong> {{ solarEnergyData.soc }}%</p>\r\n                        <p><strong>Total Yield</strong> {{ solarEnergyData.yieldtotal }}kWh</p>\r\n                        <button @click=\"loadSolarData\" class=\"btn btn-primary mt-3\">Refresh data</button>\r\n\r\n                        <button @click=\"fetchSolarPredictions\" class=\"btn btn-primary\">Predict Solar Power</button>\r\n                        <!-- Tabs -->\r\n                        <ul v-if=\"solarPredictions.length\" class=\"nav nav-tabs\" id=\"solarTabs\">\r\n                            <li class=\"nav-item\">\r\n                                <a class=\"nav-link\" :class=\"{ active: solarTab === 'table' }\" @click=\"solarTab = 'table'\">Table</a>\r\n                            </li>\r\n                            <li class=\"nav-item\">\r\n                                <a class=\"nav-link\" :class=\"{ active: solarTab === 'chart' }\" @click=\"solarTab = 'chart'\">Chart</a>\r\n                            </li>\r\n                        </ul>\r\n                        <!-- Tab contents -->\r\n                        <div v-if=\"solarTab === 'table'\">\r\n                            <!-- Prediction table for solar power -->\r\n                            <table v-if=\"solarPredictions.length\" class=\"table table-bordered table-striped mt-3\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Hour</th>\r\n                                        <th>Predicted Power (W)</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr v-for=\"(data, index) in solarPredictions\" :key=\"index\">\r\n                                        <td>Hour {{ index + 1 }}</td>\r\n                                        <td>{{ data.toFixed(2) }} W</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                            <!-- Pagination for solar predictions -->\r\n                            <div class=\"pagination-controls mt-3\">\r\n                                <button @click=\"prevPage('solar')\" :disabled=\"solarPredictionPage === 1\" class=\"btn btn-secondary\">Previous</button>\r\n                                <span class=\"mx-2\">Page {{ solarPredictionPage }}</span>\r\n                                <button @click=\"nextPage('solar')\" :disabled=\"solarPredictionPage * pageSize >= solarPredictions.length\" class=\"btn btn-secondary\">Next</button>\r\n                            </div>\r\n                        </div>\r\n                        <!-- Chart for solar predictions-->\r\n                        <div v-if=\"solarTab === 'chart'\" class=\"mt-3\">\r\n                            <canvas ref=\"solarChartCanvas\"></canvas>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <div class=\"card shadow-sm\">\r\n                    <div class=\"card-body text-center\">\r\n                        <WeatherView></WeatherView>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport apiClient from '@/services/api';\r\nimport axios from 'axios'\r\nimport { onMounted, ref, computed, watch, nextTick} from 'vue'\r\nimport { Chart, registerables} from 'chart.js'\r\nimport WeatherView from './WeatherView.vue';\r\n\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n    components: {\r\n        WeatherView\r\n    },\r\n    setup() {\r\n        const energyData = ref([])\r\n        const octopusData = ref([])\r\n        const solarData = ref([])\r\n        const solarPredictions = ref([])\r\n        const weatherData = ref([])\r\n        const chartCanvas = ref(null);\r\n        const solarChartCanvas = ref(null);\r\n        const energyChartCanvas = ref(null);\r\n        const solarEnergyData = ref(null)\r\n        let energyChartInstance = null\r\n        let chartInstance = null\r\n        let solarChartInstance = null\r\n        const consumptionData = ref([])\r\n        const currentPage = ref(1)\r\n        const solarPredictionPage = ref(1)\r\n        const energyPredictionPage = ref(1)\r\n        const pageSize = 10\r\n        const selectedGroupBy = ref(\"hour\")\r\n        const last7DaysEnergyData = ref([])\r\n        const predictedEnergy = ref([])\r\n        const selectedPredictedPeriod = ref(\"hour\")\r\n        const user = ref([])\r\n        const consumptionTab = ref(\"table\")\r\n        const solarTab = ref(\"table\")\r\n        const groupOptions = ref([\r\n            { value: \"hour\", text: \"Hourly\" },\r\n            { value: \"day\", text: \"Daily\" },\r\n            { value: \"week\", text: \"Weekly\" },\r\n            { value: \"month\", text: \"Monthly\" }\r\n        ])\r\n\r\n        const fetchConsumptionData = () => {\r\n            axios.get(\"http://127.0.0.1:8000/api/octopus-data/\", {\r\n                params: {\r\n                    group_by: selectedGroupBy.value,\r\n                    page_size: 200,\r\n                    user: user.value,\r\n                }\r\n            }).then(response => {\r\n                console.log(\"Consumption data:\", response.data.results)\r\n                consumptionData.value = response.data.results\r\n                currentPage.value = 1\r\n\r\n                last7DaysEnergyData.value = response.data.results.slice(-168)\r\n                console.log(\"Last 7 days energy data: \" + last7DaysEnergyData.value)\r\n                updateEnergyConsumptionChart();\r\n            }).catch(error => {\r\n                console.error('Error fetching data:', error);\r\n            })\r\n        }\r\n\r\n        // Paginated data computation\r\n        const paginatedData = computed(() => {\r\n            const start = (currentPage.value - 1) * pageSize;\r\n            return consumptionData.value.slice(start, start + pageSize);\r\n        });\r\n\r\n        const paginatedSolarPredictions = computed(() => {\r\n            const start = (solarPredictionPage.value - 1) * pageSize;\r\n            return solarPredictions.value.slice(start, start + pageSize);\r\n        });\r\n\r\n        const paginatedEnergyPredictions = computed(() => {\r\n            const start = (energyPredictionPage.value - 1) * pageSize;\r\n            return predictedEnergy.value.slice(start, start + pageSize);\r\n        });\r\n\r\n        const nextPage = (type) => {\r\n            if (type === 'energyConsumption') {\r\n                if (currentPage.value * pageSize < consumptionData.value.length) {\r\n                    currentPage.value++;\r\n                }\r\n            } else if (type === 'solar') {\r\n                if (solarPredictionPage.value * pageSize < solarPredictions.value.length) {\r\n                    solarPredictionPage.value++;\r\n                }\r\n            } else if (type === 'energyPredictions') {\r\n                if (energyPredictionPage.value * pageSize < predictedEnergy.value.length) {\r\n                    energyPredictionPage.value++;\r\n                }\r\n            }\r\n            // if (currentPage.value * pageSize < consumptionData.value.length) {\r\n            //     currentPage.value++;\r\n            // }\r\n        };\r\n\r\n        const prevPage = (type) => {\r\n            if (type === 'energyConsumption') {\r\n                if (currentPage.value > 1) {\r\n                    currentPage.value--;\r\n                }\r\n            } else if (type === 'solar') {\r\n                if (solarPredictionPage.value > 1) {\r\n                    solarPredictionPage.value--;\r\n                }\r\n            } else if (type === 'energyPredictions') {\r\n                if (energyPredictionPage.value > 1) {\r\n                    energyPredictionPage.value--;\r\n                }\r\n            }\r\n            // if (currentPage.value > 1) {\r\n            //     currentPage.value--;\r\n            // }\r\n        };\r\n\r\n        const fetchEnergyData = () => {\r\n            apiClient.get('energy-data/')\r\n               .then(response => {\r\n                    console.log(\"Energy Data:\", response.data);\r\n                    energyData.value = response.data;\r\n                })\r\n               .catch(error => {\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        };\r\n\r\n        const fetchSolarData = () => {\r\n            apiClient.get('solar-data/')\r\n               .then(response => {\r\n                    console.log(\"Get Solar Data:\", response.data);\r\n                    solarData.value = response.data;\r\n                })\r\n               .catch(error => {\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        };\r\n\r\n        const loadSolarData = async () => {\r\n            try {\r\n                console.log(\"Current user solar data:\", user);\r\n                const response = await axios.get('http://127.0.0.1:8000/api/solax-data/', {\r\n                    params: {\r\n                        wifiSn: 'SV8RYX9GZU',\r\n                        user: user.value,\r\n                    }\r\n                })\r\n                console.log(\"Load Solar Data:\", response.data);\r\n                solarEnergyData.value = response.data.result;\r\n                // updateChart();\r\n            } catch(error) {\r\n                console.error('Error fetching solar data:', error);\r\n            };\r\n        };\r\n\r\n        // NOT CURRENTLY NEEDED AS FETCHCONSUMPTION METHOD DOES SAME THING \r\n        const loadOctopusData = () => {\r\n            console.log(\"Current user octopus data:\", user);\r\n            axios.get(\"http://127.0.0.1:8000/api/octopus-data/\")\r\n            .then(response => {\r\n                 console.log(\"Octopus Data:\", response.data);\r\n                 octopusData.value = response.data.results;\r\n                 updateChart();\r\n             }).catch((error) => {\r\n                console.error('Error fetching octopus data:', error);\r\n             });\r\n        }\r\n\r\n        const fetchWeatherData = () => {\r\n            // apiClient.get('weather-data/')\r\n            axios.get(\"http://127.0.0.1:8000/api/weather-data/\")\r\n               .then(response => {\r\n                    console.log(\"Get Weather Data:\", response.data);\r\n                    weatherData.value = response.data;\r\n                })\r\n               .catch(error => {\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        };\r\n\r\n        const fetchPrediction = async () => {\r\n            try {\r\n                const consumptionHistoryEnergyData = ref([])\r\n                consumptionHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => entry.consumption)\r\n                const hourHistoryEnergyData = ref([])\r\n                hourHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => new Date(entry.interval_start).getHours() / 23);\r\n                const dayHistoryEnergyData = ref([])\r\n                dayHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => new Date(entry.interval_start).getDay() / 6);\r\n                const monthHistoryEnergyData = ref([])\r\n                monthHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => (new Date(entry.interval_start).getMonth() + 1) / 12);\r\n                console.log(\"Fetching prediction for period:\", selectedPredictedPeriod.value);\r\n                const response = await axios.post(\"http://127.0.0.1:5001/predict-energy\", {\r\n                    consumption_history: consumptionHistoryEnergyData.value,\r\n                    hour: hourHistoryEnergyData.value,\r\n                    day: dayHistoryEnergyData.value,\r\n                    month: monthHistoryEnergyData.value,\r\n                    prediction_period: selectedPredictedPeriod.value,\r\n                });\r\n                console.log(\"Predicted energy usage:\", response.data.predicted_energy_usage);\r\n                // predictedEnergy.value = response.data.predicted_energy_usage.map(value => value.toFixed(2) + \" kWh\");\r\n                predictedEnergy.value = response.data.predicted_energy_usage.map(value => Math.max(0, value).toFixed(2) + \" kWh\");\r\n                updateEnergyPredictionsChart();\r\n            } catch (error) {\r\n                console.error('Error fetching prediction:', error);\r\n                predictedEnergy.value = \"Error fetching prediction\";\r\n            }\r\n            \r\n        }\r\n\r\n        const fetchSolarPredictions = async () => { \r\n            const user = await getCurrentUser();\r\n            console.log(\"Current user:\", user);\r\n            try {\r\n                if (solarData.value.length < 48) { \r\n                    console.error('Not enough solar data to predict');\r\n                    return;\r\n                }\r\n\r\n                const formattedSolarData = solarData.value.slice(-48).map(entry => ({\r\n                    ac_power: entry.ac_power,\r\n                    yield_today: entry.yield_today\r\n                }))\r\n\r\n                const formattedWeatherData = weatherData.value.slice(-48).map(entry => ({\r\n                    temperature: entry.temperature,\r\n                    humidity: entry.humidity,\r\n                    wind_speed: entry.wind_speed,\r\n                    clouds: entry.clouds\r\n                }))\r\n\r\n                const response = await axios.post(\"http://127.0.0.1:5001/predict-solar\", {\r\n                    solar_history: formattedSolarData, \r\n                    weather_history: formattedWeatherData\r\n                })\r\n\r\n                console.log(\"Predicted solar energy usage:\", response.data.solar_prediction);\r\n                // solarPredictions.value = response.data.solar_prediction\r\n                solarPredictions.value = response.data.solar_prediction.map((val) => Math.max(0, val));\r\n                updateSolarChart();\r\n            } catch (error) {\r\n                console.error('Error fetching prediction:', error);\r\n                // solarPredictions.value = \"Error fetching prediction\";\r\n            }\r\n        }\r\n\r\n        const updateEnergyPredictionsChart = () => {\r\n            console.log(\"Energy chart\" + chartCanvas.value)\r\n            if (!chartCanvas.value || predictedEnergy.value.length === 0) return;\r\n            const ctx = chartCanvas.value.getContext(\"2d\");\r\n            if (chartInstance) chartInstance.destroy();\r\n            chartInstance = new Chart(ctx, {\r\n                type: 'line',\r\n                data: {\r\n                labels: predictedEnergy.value.map((_, i) => `Hour ${i + 1}`),\r\n                datasets: [{\r\n                    label: \"Predicted Energy Usage\",\r\n                    data: predictedEnergy.value.map(val => parseFloat(val)),\r\n                    borderColor: \"#007bff\",\r\n                    fill: false\r\n                }]\r\n                },\r\n                options: { responsive: true, scales: { y: { beginAtZero: true } } }\r\n            });\r\n        }\r\n\r\n        const updateEnergyConsumptionChart = () => {\r\n            console.log(\"Energy consumption chart\" + energyChartCanvas.value)\r\n            console.log(\"Energy consumption data\" + consumptionData.value)\r\n            if (!energyChartCanvas.value || consumptionData.value.length === 0) return;\r\n            const ctx = energyChartCanvas.value.getContext(\"2d\");\r\n            if (energyChartInstance) energyChartInstance.destroy();\r\n            energyChartInstance = new Chart(ctx, {\r\n                type: 'line',\r\n                data: {\r\n                    labels: consumptionData.value.map((_, i) => `Hour ${i + 1}`),\r\n                    datasets: [{\r\n                        label: \"Energy Consumption\",\r\n                        data: consumptionData.value.map(val => parseFloat(val.consumption)),\r\n                        borderColor: \"#007bff\",\r\n                        fill: false\r\n                    }]\r\n                },\r\n                options: { responsive: true, scales: { y: { beginAtZero: true } } }\r\n            });\r\n        }\r\n\r\n        const updateSolarChart = () => {\r\n            console.log(\"Solar Char\" + solarChartCanvas)\r\n            if (!solarChartCanvas.value || solarPredictions.value.length === 0) return;\r\n            const ctx = solarChartCanvas.value.getContext(\"2d\");\r\n            if (solarChartInstance) solarChartInstance.destroy();\r\n            solarChartInstance = new Chart(ctx, {\r\n                type: 'line',\r\n                data: {\r\n                    labels: solarPredictions.value.map((_, i) => `Hour ${i + 1}`),\r\n                    datasets: [{\r\n                        label: \"Predicted Solar Power\",\r\n                        data: solarPredictions.value.map(val => parseFloat(val)),\r\n                        borderColor: \"#28a745\",\r\n                        fill: false\r\n                    }]\r\n                },\r\n                options: { responsive: true, scales: { y: { beginAtZero: true } } }\r\n            });\r\n        }\r\n\r\n        const getCurrentUser = async () => {\r\n            const response = await apiClient.get(\"/api/current-user/\");\r\n            return response.data;\r\n        }\r\n\r\n        onMounted(async () => {\r\n            // fetchEnergyData();\r\n            // fetchSolarData();\r\n            try {\r\n                user.value = await getCurrentUser();\r\n                // user.value = getUser.data;\r\n                console.log(\"User data:\", user.value);\r\n                // console.log(\"Current user:\", getUser);\r\n                await loadSolarData();\r\n                await fetchSolarData();\r\n                // loadOctopusData();\r\n                await fetchConsumptionData(); \r\n                fetchWeatherData();\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n            \r\n        });\r\n\r\n        watch(consumptionTab, async () => {\r\n            if (consumptionTab.value === 'chart'){\r\n                await nextTick();\r\n                updateEnergyConsumptionChart();\r\n                updateEnergyPredictionsChart();\r\n            } \r\n        });\r\n\r\n        watch(solarTab, async () => {\r\n            if (solarTab.value === 'chart') {\r\n                await nextTick();\r\n                updateSolarChart()\r\n            };\r\n        });\r\n\r\n        return {\r\n            energyData,\r\n            chartCanvas,\r\n            solarChartCanvas,\r\n            energyChartCanvas,\r\n            solarEnergyData,\r\n            loadSolarData,\r\n            solarData,\r\n            octopusData,\r\n            consumptionData,\r\n            currentPage,\r\n            pageSize,\r\n            selectedGroupBy,\r\n            groupOptions,\r\n            paginatedData,\r\n            // updateChart,\r\n            nextPage,\r\n            prevPage,\r\n            fetchConsumptionData,\r\n            WeatherView,\r\n            last7DaysEnergyData,\r\n            predictedEnergy,\r\n            selectedPredictedPeriod,\r\n            fetchPrediction,\r\n            solarPredictions,\r\n            fetchSolarPredictions,\r\n            consumptionTab,\r\n            solarTab,\r\n        };\r\n    }\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}