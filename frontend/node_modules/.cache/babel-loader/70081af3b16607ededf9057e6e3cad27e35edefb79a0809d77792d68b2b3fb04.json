{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container py-4\"\n};\nconst _hoisted_2 = {\n  class: \"row\"\n};\nconst _hoisted_3 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_4 = {\n  class: \"card shadow-sm mb-4\"\n};\nconst _hoisted_5 = {\n  class: \"card-body\"\n};\nconst _hoisted_6 = [\"value\"];\nconst _hoisted_7 = {\n  class: \"table table-bordered table-striped mt-3\"\n};\nconst _hoisted_8 = {\n  class: \"pagination-controls mt-3\"\n};\nconst _hoisted_9 = [\"disabled\"];\nconst _hoisted_10 = {\n  class: \"mx-2\"\n};\nconst _hoisted_11 = [\"disabled\"];\nconst _hoisted_12 = {\n  key: 0,\n  class: \"mt-3\"\n};\nconst _hoisted_13 = {\n  key: 0,\n  class: \"col-md-6\"\n};\nconst _hoisted_14 = {\n  class: \"card shadown-sm mb-4\"\n};\nconst _hoisted_15 = {\n  class: \"card-body\"\n};\nconst _hoisted_16 = {\n  class: \"row\"\n};\nconst _hoisted_17 = {\n  class: \"col-md-12\"\n};\nconst _hoisted_18 = {\n  class: \"card shadow-sm\"\n};\nconst _hoisted_19 = {\n  class: \"card-body text-center\"\n};\nexport function render(_ctx, _cache) {\n  const _component_WeatherView = _resolveComponent(\"WeatherView\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[18] || (_cache[18] = _createElementVNode(\"h1\", {\n    class: \"text-center text-primary mb-4\"\n  }, \"Smart Home Energy Dashboard\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_cache[10] || (_cache[10] = _createElementVNode(\"h4\", {\n    class: \"card-title text-dark\"\n  }, \"Electricity Consumption Test\", -1 /* HOISTED */)), _createCommentVNode(\" Group By Dropdown \"), _cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    for: \"group-by\"\n  }, \"Group Consumption Data By:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"group-by\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.selectedGroupBy = $event),\n    class: \"form-control\",\n    onChange: _cache[1] || (_cache[1] = (...args) => _ctx.fetchConsumptionData && _ctx.fetchConsumptionData(...args))\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.groupOptions, option => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: option.value,\n      value: option.value\n    }, _toDisplayString(option.text), 9 /* TEXT, PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, _ctx.selectedGroupBy]]), _createCommentVNode(\" Bootstrap Table \"), _createElementVNode(\"table\", _hoisted_7, [_cache[7] || (_cache[7] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Start Time\"), _createElementVNode(\"th\", null, \"End Time\"), _createElementVNode(\"th\", null, \"Consumption (kWh)\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.paginatedData, (data, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(new Date(data.interval_start).toLocaleString('en-GB', {\n      dateStyle: 'short',\n      timeStyle: 'short'\n    })), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(new Date(data.interval_end).toLocaleString('en-GB', {\n      dateStyle: 'short',\n      timeStyle: 'short'\n    })), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(data.consumption), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Pagination \"), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.prevPage && _ctx.prevPage(...args)),\n    disabled: _ctx.currentPage === 1,\n    class: \"btn btn-secondary\"\n  }, \"Previous\", 8 /* PROPS */, _hoisted_9), _createElementVNode(\"span\", _hoisted_10, \"Page \" + _toDisplayString(_ctx.currentPage), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.nextPage && _ctx.nextPage(...args)),\n    disabled: _ctx.currentPage * _ctx.pageSize >= _ctx.consumptionData.length,\n    class: \"btn btn-secondary\"\n  }, \"Next\", 8 /* PROPS */, _hoisted_11)]), _createCommentVNode(\" Load data button \"), _createCommentVNode(\" <button @click=\\\"loadConsumptionData\\\" class=\\\"btn btn-primary mt-3\\\">Load Consumption Data</button> \"), _cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    for: \"prediction-period\"\n  }, \"Predict Energy Usage For:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"prediction-period\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.selectedPredictedPeriod = $event),\n    class: \"form-control\"\n  }, _cache[8] || (_cache[8] = [_createElementVNode(\"option\", {\n    value: \"hour\"\n  }, \"Next Hour\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"day\"\n  }, \"Next Day\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"week\"\n  }, \"Next 7 Days\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedPredictedPeriod]]), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => _ctx.fetchPrediction && _ctx.fetchPrediction(...args)),\n    class: \"btn btn-primary mt-3\"\n  }, \"Predict energy usage\"), _ctx.predictedEnergy !== null ? (_openBlock(), _createElementBlock(\"p\", _hoisted_12, [_cache[9] || (_cache[9] = _createElementVNode(\"strong\", null, \"Predicted Energy Usage:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.predictedEnergy), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" <ul class=\\\"list-group\\\">\\r\\n                            <li v-for=\\\"(data,index) in octopusData\\\" :key=\\\"index\\\" class=\\\"list-group-item\\\">\\r\\n                                Time: {{ data.interval_start }} - {{ data.interval_end }} â†’ {{ data.consumption }} kWh\\r\\n                            </li>\\r\\n                        </ul>\\r\\n                        <button @click=\\\"loadOctopusData\\\" class=\\\"btn btn-primary mt-3\\\">Load Electricity Data</button> \")])])]), _createCommentVNode(\" <div class=\\\"col-md-6\\\">\\r\\n                <div class=\\\"card shadow-sm mb-4\\\">\\r\\n                    <div class=\\\"card-body\\\">\\r\\n                        <h4 class=\\\"card-title text-dark\\\">Previous Solar Data</h4>\\r\\n                        <ul class=\\\"list-group\\\">\\r\\n                            <li v-for=\\\"data in solarData\\\" :key=\\\"data.id\\\" class=\\\"list-group-item\\\">\\r\\n                                <strong>{{ data.inverter_sn}}</strong>: {{ data.ac_power }} kWh\\r\\n                            </li>\\r\\n                        </ul>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div> \"), _ctx.solarEnergyData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, [_cache[17] || (_cache[17] = _createElementVNode(\"h4\", {\n    class: \"card-title text-dark\"\n  }, \"Solar Energy Data\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, [_cache[13] || (_cache[13] = _createElementVNode(\"strong\", null, \"Current Solar Power:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.solarEnergyData.acpower) + \"kWh\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[14] || (_cache[14] = _createElementVNode(\"strong\", null, \"Daily Yield:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.solarEnergyData.yieldtoday) + \"kWh\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[15] || (_cache[15] = _createElementVNode(\"strong\", null, \"Battery Power Percentage:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.solarEnergyData.soc) + \"%\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[16] || (_cache[16] = _createElementVNode(\"strong\", null, \"Total Yield\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.solarEnergyData.yieldtotal) + \"kWh\", 1 /* TEXT */)]), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => _ctx.loadSolarData && _ctx.loadSolarData(...args)),\n    class: \"btn btn-primary mt-3\"\n  }, \"Refresh data\")])])])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_16, [_createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_createCommentVNode(\" <h4 class=\\\"card-title text-dark\\\">Energy consumption chart</h4>\\r\\n                        <canvas ref=\\\"chartCanvas\\\" class=\\\"w-100\\\"></canvas> \"), _createVNode(_component_WeatherView)])])])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_createCommentVNode","for","id","_cache","$event","_ctx","selectedGroupBy","onChange","args","fetchConsumptionData","_Fragment","_renderList","groupOptions","option","value","text","_hoisted_6","_hoisted_7","paginatedData","data","index","_toDisplayString","Date","interval_start","toLocaleString","dateStyle","timeStyle","interval_end","consumption","_hoisted_8","onClick","prevPage","disabled","currentPage","_hoisted_9","_hoisted_10","nextPage","pageSize","consumptionData","length","_hoisted_11","selectedPredictedPeriod","fetchPrediction","predictedEnergy","_hoisted_12","_createTextVNode","solarEnergyData","_hoisted_13","_hoisted_14","_hoisted_15","acpower","yieldtoday","soc","yieldtotal","loadSolarData","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_createVNode","_component_WeatherView"],"sources":["C:\\Users\\Jamaa\\Final Year Project\\frontend\\src\\components\\EnergyData.vue"],"sourcesContent":["<template>\r\n    <div class=\"container py-4\">\r\n        <h1 class=\"text-center text-primary mb-4\">Smart Home Energy Dashboard</h1>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n                <div class=\"card shadow-sm mb-4\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title text-dark\">Electricity Consumption Test</h4>\r\n                        <!-- Group By Dropdown -->\r\n                         \r\n                        <label for=\"group-by\">Group Consumption Data By:</label>\r\n                            <select id=\"group-by\" v-model=\"selectedGroupBy\" class=\"form-control\" @change=\"fetchConsumptionData\">\r\n                                <option v-for=\"option in groupOptions\" :key=\"option.value\" :value=\"option.value\">\r\n                                    {{ option.text }}\r\n                                </option>\r\n                            </select>\r\n                        \r\n                         <!-- Bootstrap Table -->\r\n                        <table class=\"table table-bordered table-striped mt-3\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Start Time</th>\r\n                                    <th>End Time</th>\r\n                                    <th>Consumption (kWh)</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr v-for=\"(data, index) in paginatedData\" :key=\"index\">\r\n                                    <td>{{ new Date(data.interval_start).toLocaleString('en-GB', { dateStyle: 'short', timeStyle: 'short' }) }}</td>\r\n                                    <td>{{ new Date(data.interval_end).toLocaleString('en-GB', { dateStyle: 'short', timeStyle: 'short' }) }}</td>\r\n                                    <td>{{ data.consumption }}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <!-- Pagination -->\r\n                        <div class=\"pagination-controls mt-3\">\r\n                            <button @click=\"prevPage\" :disabled=\"currentPage === 1\" class=\"btn btn-secondary\">Previous</button>\r\n                            <span class=\"mx-2\">Page {{ currentPage }}</span>\r\n                            <button @click=\"nextPage\" :disabled=\"currentPage * pageSize >= consumptionData.length\" class=\"btn btn-secondary\">Next</button>\r\n                        </div>\r\n\r\n                        <!-- Load data button -->\r\n                        <!-- <button @click=\"loadConsumptionData\" class=\"btn btn-primary mt-3\">Load Consumption Data</button> -->\r\n\r\n                        <label for=\"prediction-period\">Predict Energy Usage For:</label>\r\n                        <select id=\"prediction-period\" v-model=\"selectedPredictedPeriod\" class=\"form-control\">\r\n                            <option value=\"hour\">Next Hour</option>\r\n                            <option value=\"day\">Next Day</option>\r\n                            <option value=\"week\">Next 7 Days</option>\r\n                        </select>\r\n\r\n                        <button @click=\"fetchPrediction\" class=\"btn btn-primary mt-3\">Predict energy usage</button>\r\n                        <p v-if=\"predictedEnergy !== null\" class=\"mt-3\">\r\n                            <strong>Predicted Energy Usage:</strong> {{  predictedEnergy }}\r\n                        </p>\r\n                        <!-- <ul class=\"list-group\">\r\n                            <li v-for=\"(data,index) in octopusData\" :key=\"index\" class=\"list-group-item\">\r\n                                Time: {{ data.interval_start }} - {{ data.interval_end }} â†’ {{ data.consumption }} kWh\r\n                            </li>\r\n                        </ul>\r\n                        <button @click=\"loadOctopusData\" class=\"btn btn-primary mt-3\">Load Electricity Data</button> -->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- <div class=\"col-md-6\">\r\n                <div class=\"card shadow-sm mb-4\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title text-dark\">Previous Solar Data</h4>\r\n                        <ul class=\"list-group\">\r\n                            <li v-for=\"data in solarData\" :key=\"data.id\" class=\"list-group-item\">\r\n                                <strong>{{ data.inverter_sn}}</strong>: {{ data.ac_power }} kWh\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div> -->\r\n\r\n            <div v-if=\"solarEnergyData\" class=\"col-md-6\">\r\n                <div class=\"card shadown-sm mb-4\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title text-dark\">Solar Energy Data</h4>\r\n                        <p><strong>Current Solar Power:</strong> {{ solarEnergyData.acpower }}kWh</p>\r\n                        <p><strong>Daily Yield:</strong> {{ solarEnergyData.yieldtoday }}kWh</p>\r\n                        <p><strong>Battery Power Percentage:</strong> {{ solarEnergyData.soc }}%</p>\r\n                        <p><strong>Total Yield</strong> {{ solarEnergyData.yieldtotal }}kWh</p>\r\n                        <button @click=\"loadSolarData\" class=\"btn btn-primary mt-3\">Refresh data</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <div class=\"card shadow-sm\">\r\n                    <div class=\"card-body text-center\">\r\n                        <!-- <h4 class=\"card-title text-dark\">Energy consumption chart</h4>\r\n                        <canvas ref=\"chartCanvas\" class=\"w-100\"></canvas> -->\r\n                        <WeatherView></WeatherView>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport apiClient from '@/services/api';\r\nimport axios from 'axios'\r\nimport { onMounted, ref, computed} from 'vue'\r\nimport { Chart, registerables} from 'chart.js'\r\n// import Weather from './WeatherView.vue';\r\nimport WeatherView from './WeatherView.vue';\r\n\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n    components: {\r\n        WeatherView\r\n    },\r\n    setup() {\r\n        const energyData = ref([])\r\n        const octopusData = ref([])\r\n        const solarData = ref([])\r\n        const solarPredictions = ref([])\r\n        const chartCanvas = ref(null);\r\n        const solarEnergyData = ref(null)\r\n        let chartInstance = null\r\n        const consumptionData = ref([])\r\n        const currentPage = ref(1)\r\n        const pageSize = 10\r\n        const selectedGroupBy = ref(\"hour\")\r\n        const last7DaysEnergyData = ref([])\r\n        const predictedEnergy = ref([])\r\n        const selectedPredictedPeriod = ref(\"hour\")\r\n        const groupOptions = ref([\r\n            { value: \"hour\", text: \"Hourly\" },\r\n            { value: \"day\", text: \"Daily\" },\r\n            { value: \"week\", text: \"Weekly\" },\r\n            { value: \"month\", text: \"Monthly\" }\r\n        ])\r\n\r\n        const fetchConsumptionData = () => {\r\n            axios.get(\"http://127.0.0.1:8000/api/octopus-data/\", {\r\n                params: {\r\n                    group_by: selectedGroupBy.value,\r\n                    page_size: 200\r\n                }\r\n            }).then(response => {\r\n                console.log(\"Consumption data:\", response.data.results)\r\n                consumptionData.value = response.data.results\r\n                currentPage.value = 1\r\n\r\n                last7DaysEnergyData.value = response.data.results.slice(-168)\r\n                console.log(\"Last 7 days energy data: \" + last7DaysEnergyData.value)\r\n            }).catch(error => {\r\n                console.error('Error fetching data:', error);\r\n            })\r\n        }\r\n\r\n        // Paginated data computation\r\n        const paginatedData = computed(() => {\r\n            const start = (currentPage.value - 1) * pageSize;\r\n            return consumptionData.value.slice(start, start + pageSize);\r\n        });\r\n\r\n        const nextPage = () => {\r\n            if (currentPage.value * pageSize < consumptionData.value.length) {\r\n                currentPage.value++;\r\n            }\r\n        };\r\n\r\n        const prevPage = () => {\r\n            if (currentPage.value > 1) {\r\n                currentPage.value--;\r\n            }\r\n        };\r\n\r\n        const fetchEnergyData = () => {\r\n            apiClient.get('energy-data/')\r\n               .then(response => {\r\n                    console.log(\"Energy Data:\", response.data);\r\n                    energyData.value = response.data;\r\n                })\r\n               .catch(error => {\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        };\r\n\r\n        const fetchSolarData = () => {\r\n            apiClient.get('solar-data/')\r\n               .then(response => {\r\n                    console.log(\"Get Solar Data:\", response.data);\r\n                    solarData.value = response.data;\r\n                })\r\n               .catch(error => {\r\n                    console.error('Error fetching data:', error);\r\n                });\r\n        };\r\n\r\n        const loadSolarData = () => {\r\n            axios.get('http://127.0.0.1:8000/api/solax-data/', {\r\n                wifiSn: 'SV8RYX9GZU',\r\n            }).then((response) => {\r\n                console.log(\"Load Solar Data:\", response.data);\r\n                solarEnergyData.value = response.data.result;\r\n                updateChart();\r\n            }).catch((error) => {\r\n                console.error('Error fetching solar data:', error);\r\n            });\r\n        };\r\n\r\n        // NOT CURRENTLY NEEDED AS FETCHCONSUMPTION METHOD DOES SAME THING \r\n        const loadOctopusData = () => {\r\n            axios.get(\"http://127.0.0.1:8000/api/octopus-data/\")\r\n            .then(response => {\r\n                 console.log(\"Octopus Data:\", response.data);\r\n                 octopusData.value = response.data.results;\r\n                 updateChart();\r\n             }).catch((error) => {\r\n                console.error('Error fetching octopus data:', error);\r\n             });\r\n        }\r\n\r\n        const fetchPrediction = async () => {\r\n            try {\r\n                const consumptionHistoryEnergyData = ref([])\r\n                consumptionHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => entry.consumption)\r\n                const hourHistoryEnergyData = ref([])\r\n                hourHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => new Date(entry.interval_start).getHours() / 23);\r\n                const dayHistoryEnergyData = ref([])\r\n                dayHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => new Date(entry.interval_start).getDay() / 6);\r\n                const monthHistoryEnergyData = ref([])\r\n                monthHistoryEnergyData.value = last7DaysEnergyData.value.map(entry => (new Date(entry.interval_start).getMonth() + 1) / 12);\r\n                console.log(\"Fetching prediction for period:\", selectedPredictedPeriod.value);\r\n                const response = await axios.post(\"http://127.0.0.1:5001/predict-energy\", {\r\n                    consumption_history: consumptionHistoryEnergyData.value,\r\n                    hour: hourHistoryEnergyData.value,\r\n                    day: dayHistoryEnergyData.value,\r\n                    month: monthHistoryEnergyData.value,\r\n                    prediction_period: selectedPredictedPeriod.value,\r\n                });\r\n                console.log(\"Predicted energy usage:\", response.data.predicted_energy_usage);\r\n                predictedEnergy.value = response.data.predicted_energy_usage.map(value => value.toFixed(2) + \" kWh\");\r\n            } catch (error) {\r\n                console.error('Error fetching prediction:', error);\r\n                predictedEnergy.value = \"Error fetching prediction\";\r\n            }\r\n            \r\n        }\r\n\r\n        const fetchSolarPredictions = async () => { \r\n            try {\r\n                if (solarData.value.length < 48) { \r\n                    console.error('Not enough solar data to predict');\r\n                    return;\r\n                }\r\n\r\n                const formattedSolarData = solarData.value.slice(-48).map(entry => ({\r\n                    ac_power: entry.ac_power,\r\n                    yield_today: entry.yield_today\r\n                }))\r\n\r\n                const response = await axios.post(\"http://127.0.0.1:5000/predict-solar\", {\r\n                    solar_history: formattedSolarData\r\n                    weather_history\r\n                })\r\n            }\r\n        }\r\n        \r\n        const updateChart = () => {\r\n            const ctx = chartCanvas.value.getContext('2d');\r\n            if (chartInstance) chartInstance.destroy();\r\n            chartInstance = new Chart(ctx, {\r\n                type: 'bar',\r\n                data: {\r\n                    labels: [\"Solar Power\", \"Solar Energy\", \"Solar Power Percentage\", \"Energy power percentage\"],\r\n                    datasets: [{\r\n                        label: 'Solar Energy Data',\r\n                        data: [solarEnergyData.value.acpower, solarEnergyData.value.yieldtoday, solarEnergyData.value.soc, solarEnergyData.value.uploadTime],\r\n                        backgroundColor: [\"#007bff\", \"#ffc107\", \"#28a745\"]\r\n                    }]\r\n                }\r\n            })\r\n        }\r\n\r\n        onMounted(() => {\r\n            fetchEnergyData();\r\n            fetchSolarData();\r\n            loadSolarData();\r\n            loadOctopusData();\r\n            fetchConsumptionData(); \r\n        });\r\n\r\n        return {\r\n            energyData,\r\n            chartCanvas,\r\n            solarEnergyData,\r\n            loadSolarData,\r\n            solarData,\r\n            octopusData,\r\n            consumptionData,\r\n            currentPage,\r\n            pageSize,\r\n            selectedGroupBy,\r\n            groupOptions,\r\n            paginatedData,\r\n            updateChart,\r\n            nextPage,\r\n            prevPage,\r\n            fetchConsumptionData,\r\n            WeatherView,\r\n            last7DaysEnergyData,\r\n            predictedEnergy,\r\n            selectedPredictedPeriod,\r\n            fetchPrediction\r\n        };\r\n    }\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}