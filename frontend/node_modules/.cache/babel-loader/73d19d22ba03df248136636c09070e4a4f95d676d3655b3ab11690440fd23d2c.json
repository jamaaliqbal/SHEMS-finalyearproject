{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"automation-page\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 1\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[2] || (_cache[2] = _createElementVNode(\"h1\", null, \"Automations\", -1 /* HOISTED */)), _ctx.devices.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.devices, device => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: device.id,\n      class: \"device-card\"\n    }, [_createElementVNode(\"h3\", null, _toDisplayString(device.name), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[0] || (_cache[0] = _createTextVNode(\"Status: \")), _createElementVNode(\"strong\", null, _toDisplayString(device.status ? 'ON' : 'OFF'), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n      onClick: $event => _ctx.toggleDevice(device.id)\n    }, \"Toggle\", 8 /* PROPS */, _hoisted_3)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, _cache[1] || (_cache[1] = [_createElementVNode(\"p\", null, \"No devices available.\", -1 /* HOISTED */)])))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_ctx","devices","length","_hoisted_2","_Fragment","_renderList","device","id","_toDisplayString","name","_createTextVNode","status","onClick","$event","toggleDevice","_hoisted_3","_hoisted_4","_cache"],"sources":["C:\\Users\\Jamaa\\Final Year Project\\frontend\\src\\pages\\AutomationsPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"automation-page\">\r\n        <h1>Automations</h1>\r\n        <div v-if=\"devices.length\">\r\n            <div v-for=\"device in devices\" :key=\"device.id\" class=\"device-card\">\r\n                <h3>{{  device.name }}</h3>\r\n                <p>Status: <strong>{{  device.status ? 'ON' : 'OFF' }}</strong></p>\r\n                <button @click=\"toggleDevice(device.id)\">Toggle</button>\r\n            </div> \r\n        </div>\r\n        <div v-else>\r\n            <p>No devices available.</p>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { getDevices, toggleDeviceStatus } from \"@/services/api\";\r\n\r\nexport default {\r\n    name: \"AutomationPage\",\r\n    data() {\r\n        return {\r\n            devices: []\r\n        };\r\n    },\r\n    methods() {\r\n        async fetchDevices() {\r\n            this.devices = await getDevices();\r\n        }\r\n    }\r\n}\r\n</script>"],"mappings":";;EACSA,KAAK,EAAC;AAAiB;;EADhCC,GAAA;AAAA;mBAAA;;EAAAA,GAAA;AAAA;;uBACIC,mBAAA,CAYM,OAZNC,UAYM,G,0BAXFC,mBAAA,CAAoB,YAAhB,aAAW,sBACJC,IAAA,CAAAC,OAAO,CAACC,MAAM,I,cAAzBL,mBAAA,CAMM,OATdM,UAAA,I,kBAIYN,mBAAA,CAIMO,SAAA,QARlBC,WAAA,CAIkCL,IAAA,CAAAC,OAAO,EAAjBK,MAAM;yBAAlBT,mBAAA,CAIM;MAJ0BD,GAAG,EAAEU,MAAM,CAACC,EAAE;MAAEZ,KAAK,EAAC;QAClDI,mBAAA,CAA2B,YAAAS,gBAAA,CAAnBF,MAAM,CAACG,IAAI,kBACnBV,mBAAA,CAAmE,Y,0BANnFW,gBAAA,CAMmB,UAAQ,IAAAX,mBAAA,CAAoD,gBAAAS,gBAAA,CAAxCF,MAAM,CAACK,MAAM,gC,GACpCZ,mBAAA,CAAwD;MAA/Ca,OAAK,EAAAC,MAAA,IAAEb,IAAA,CAAAc,YAAY,CAACR,MAAM,CAACC,EAAE;OAAG,QAAM,iBAP/DQ,UAAA,E;qDAUQlB,mBAAA,CAEM,OAZdmB,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAWYlB,mBAAA,CAA4B,WAAzB,uBAAqB,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}